"use strict";(self.webpackChunkmu_website=self.webpackChunkmu_website||[]).push([[8885],{52168:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>t,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>_,toc:()=>d});var s=n(74848),a=n(28453);const i={},o="\u7fa4\u53cb\u8bed\u5f55",_={id:"Blog/QQBot/\u7fa4\u53cb\u8bed\u5f55",title:"\u7fa4\u53cb\u8bed\u5f55",description:"2024-7-9~2024-7-11",source:"@site/docs/Blog/05-QQBot/09-\u7fa4\u53cb\u8bed\u5f55.md",sourceDirName:"Blog/05-QQBot",slug:"/Blog/QQBot/\u7fa4\u53cb\u8bed\u5f55",permalink:"/docs/Blog/QQBot/\u7fa4\u53cb\u8bed\u5f55",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Blog/05-QQBot/09-\u7fa4\u53cb\u8bed\u5f55.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"Blog",previous:{title:"\u65e5\u5386\u63d0\u793a",permalink:"/docs/Blog/QQBot/\u65e5\u5386\u63d0\u793a"},next:{title:"\uff01\u60c5\u51b5\u8bf4\u660e\uff01",permalink:"/docs/Blog/QQBot/\u60c5\u51b5\u8bf4\u660e"}},t={},d=[{value:"init_citiao_db.py",id:"init_citiao_dbpy",level:2},{value:"update_db.py",id:"update_dbpy",level:2},{value:"\u529f\u80fd\u8bbe\u8ba1",id:"\u529f\u80fd\u8bbe\u8ba1",level:2},{value:"citiao.py",id:"citiaopy",level:2}];function u(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"\u7fa4\u53cb\u8bed\u5f55",children:"\u7fa4\u53cb\u8bed\u5f55"}),"\n",(0,s.jsx)(r.p,{children:"2024-7-9~2024-7-11"}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.p,{children:"\u6709\u7fa4\u53cb\u8bf4\u60f3\u770b\u4ee3\u7801\uff0c\u56e0\u6b64\u5c31\u653e\u51fa\u6765\u4e86\u3002"}),"\n",(0,s.jsx)(r.p,{children:"\u8bbe\u8ba1\u7684\u662f\u7c7b\u4f3c\u4e8e\u5173\u952e\u8bcd\u56de\u590d\u7684\uff0c\u4f46\u662f\u80fd\u4e3b\u8981\u662f\u5b58\u653e\u56fe\u7247\u3002\u7c7b\u578b\u76f8\u5f53\u4e8e\u662f\u5927\u4f19\u53ef\u4ee5\u7ed9\u56fe\u7247\u5b58\u653e\u5728\u670d\u52a1\u5668\u5e76\u4e14\u5206\u7c7b\u5230\u6587\u4ef6\u5939\u3002\u6bd4\u5982\u4e0a\u4f202\u5f20\u56fe\u7247\u90fd\u547d\u540d\u4e3a\u5c0f\u767d\uff0c\u90a3\u4e48\u5c0f\u767d\u8fd9\u4e2a\u6587\u4ef6\u5939\u4e0b\u5c31\u4f1a\u5b58\u653e\u4e24\u5f20\u56fe\u7247\uff0c\u5728\u83b7\u53d6\u7684\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u968f\u673a\u83b7\u53d6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2\u56fe\u7247\u5bf9\u5e94\u7684ID\u6765\u67e5\u770b\u6307\u5b9a\u56fe\u7247\u3002"}),"\n",(0,s.jsx)(r.p,{children:"\u9996\u5148\u662f\u4fee\u6539\u4e3b\u51fd\u6570\u7684\u8c03\u7528\uff0c\u5f88\u7b80\u5355\u7684\u4fee\u6539\uff0c\u6dfb\u52a0\u8fd9\u6837\u4e24\u53e5"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"from scripts.citiao.citiao import handle_yulu_command, process_message, save_image_to_db, download_image, is_admin,add_image_from_reply,get_all_aliases\r\n        \r\n    \tif message.startswith('/yulu'):\r\n            asyncio.run(handle_yulu_command(message, raw_message, user_id, group_id, send_group_message))\r\n        else:\r\n            asyncio.run(process_message(data, send_group_message))\n"})}),"\n",(0,s.jsx)(r.p,{children:"\u7136\u540e\u662f\u7f16\u5199\u6570\u636e\u5e93\uff0c\u4e4b\u524d\u60f3\u7684\u662f\u5b58base64\u6570\u636e\u5230\u6570\u636e\u5e93\u91cc\uff0c\u7136\u540e\u53c8\u60f3\u7684\u76f4\u63a5\u5b58\u5b57\u8282\u6570\u636e\u5230\u6570\u636e\u5e93\uff0c\u6700\u540e\u89c9\u5f97\u8fd8\u662f\u76f4\u63a5\u5b58\u6210\u56fe\u7247\u53d1\u56fe\u7247\u6bd4\u8f83\u597d\u3002"}),"\n",(0,s.jsx)(r.p,{children:"\u9996\u5148\u662f\u521d\u59cb\u5316"}),"\n",(0,s.jsx)(r.h2,{id:"init_citiao_dbpy",children:"init_citiao_db.py"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"import sqlite3\r\nimport os\r\n\r\nDATABASE_PATH = os.path.join(os.path.dirname(__file__), 'citiao.db')\r\n\r\ndef create_db():\r\n    conn = sqlite3.connect(DATABASE_PATH)\r\n    cursor = conn.cursor()\r\n\r\n    cursor.execute('''\r\n    CREATE TABLE IF NOT EXISTS yulu (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        qq_id TEXT NOT NULL,\r\n        alias TEXT NOT NULL\r\n    )\r\n    ''')\r\n\r\n    conn.commit()\r\n    conn.close()\r\n\r\nif __name__ == \"__main__\":\r\n    create_db()\r\n    print(\"Database created successfully.\")\n"})}),"\n",(0,s.jsx)(r.p,{children:"\u9996\u5148\u662f\u5b58\u7684ID \u6dfb\u52a0\u4eba\u7684QQ\u53f7 \u522b\u540d"}),"\n",(0,s.jsx)(r.p,{children:"\u4e0d\u8fc7\u540e\u9762\u9700\u8981\u8bbe\u7f6e\u662f\u5426\u5728\u8fd9\u4e2a\u7fa4\u4f7f\u7528yulu\u529f\u80fd\uff0c\u56e0\u6b64\u53c8\u65b0\u589e\u4e86\u4e00\u4e2a"}),"\n",(0,s.jsx)(r.h2,{id:"update_dbpy",children:"update_db.py"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"import sqlite3\r\nimport os\r\n\r\nDATABASE_PATH = os.path.join(os.path.dirname(__file__), 'citiao.db')\r\n\r\ndef update_db():\r\n    conn = sqlite3.connect(DATABASE_PATH)\r\n    cursor = conn.cursor()\r\n\r\n    cursor.execute('''\r\n    CREATE TABLE IF NOT EXISTS group_settings (\r\n        group_id TEXT PRIMARY KEY,\r\n        yulu_enabled INTEGER NOT NULL DEFAULT 1\r\n    )\r\n    ''')\r\n\r\n    conn.commit()\r\n    conn.close()\r\n\r\nif __name__ == \"__main__\":\r\n    update_db()\r\n    print(\"Database updated successfully.\")\n"})}),"\n",(0,s.jsx)(r.p,{children:"\u90a3\u4e48\u73b0\u5728\u5c31\u662f\u5bf9citiao.py\uff08\u8bed\u5f55\uff09\u8fdb\u884c\u7f16\u5199"}),"\n",(0,s.jsx)(r.p,{children:"\u6211\u7684\u529f\u80fd\u662f\u8fd9\u6837\u8bbe\u8ba1\uff1a\uff08/help yulu\uff09"}),"\n",(0,s.jsx)(r.h2,{id:"\u529f\u80fd\u8bbe\u8ba1",children:"\u529f\u80fd\u8bbe\u8ba1"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-txt",children:"/yulu add (\u522b\u540d)\uff1a\u522b\u540d\u4e3a\u53ef\u9009\u5b57\u6bb5\uff0c\u53d1\u9001\u540e\u9700\u8981\u53d1\u9001\u4e00\u5f20\u56fe\u7247\r\n\r\n/yulu info\uff1a\u67e5\u8be2\u4f60\u672c\u4eba\u6dfb\u52a0\u7684\u56fe\u7247\r\n\r\n/yulu del [\u5e8f\u53f7]\uff1a\u5220\u9664\u81ea\u5df1\u6dfb\u52a0\u7684\u5e8f\u53f7\u56fe\u7247\uff0c\u65e0\u6cd5\u5220\u9664\u5176\u4ed6\u4eba\u6dfb\u52a0\u7684\u56fe\u7247\r\n\r\n/yulu dels [\u522b\u540d]\uff1a\uff08\u7ba1\u7406\u5458\u53ef\u7528\uff09\u5220\u9664\u67d0\u4e2a\u522b\u540d\u4e0b\u7684\u6240\u6709\u56fe\u7247\r\n\r\n/yulu search (\u522b\u540d)\uff1a\u4e0d\u4f7f\u7528\u522b\u540d\u53c2\u6570\u65f6\uff0c\u5c06\u5c55\u793a\u6240\u6709\u522b\u540d\u3002\u67e5\u8be2\u522b\u540d\u65f6\u5c06\u5c55\u793a\u522b\u540d\u5305\u542b\u7684\u6240\u6709\u5e8f\u53f7\r\n\r\n/yulu show (\u5e8f\u53f7|\u522b\u540d)\uff1a\u4e0d\u4f7f\u7528\u53c2\u6570\u65f6\uff0c\u5c06\u968f\u673a\u5c55\u793a\u4e00\u5f20\u5df2\u6dfb\u52a0\u7684\u5185\u5bb9\uff0c\u4f7f\u7528\u53c2\u6570\u65f6\u4f1a\u7cbe\u51c6\u5c55\u793a\uff08\u53c2\u6570\u4e3a\u522b\u540d\u65f6\u4f1a\u968f\u673a\u5c55\u793a\u4e00\u5f20\u522b\u540d\u7684\u5185\u5bb9\uff09\r\n\r\n/yulu re [\u5e8f\u53f7] [\u65b0\u7684\u522b\u540d]\uff1a\u4fee\u6539\u5e8f\u53f7\u7684\u522b\u540d\uff0c\u65e0\u6cd5\u4fee\u6539\u5176\u4ed6\u4eba\u6dfb\u52a0\u7684\u56fe\u7247\r\n\r\n/yulu [enable|disable]\uff1a\u5f00/\u5173\u672c\u7fa4\u8bed\u5f55\u529f\u80fd\uff08BOT\u7ba1\u7406\u5458\u53ef\u7528\uff09\n"})}),"\n",(0,s.jsx)(r.p,{children:"\u4e00\u773c\u4e01\u771f\uff0c\u53ef\u4ee5\u5f00\u59cb\u5199\u4ee3\u7801\u4e86\uff0c\u89e3\u91ca\u6211\u5199\u5728\u4ee3\u7801\u4e2d\u4e86\uff0c\u540c\u65f6\u9700\u8981\u5728\u540c\u6587\u4ef6\u5939\u4e0b\u65b0\u5efaimg\u6587\u4ef6\u5939\uff0c\u6700\u540e\u4f1a\u5c55\u793a\u6811\u7ed3\u6784"}),"\n",(0,s.jsx)(r.h2,{id:"citiaopy",children:"citiao.py"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'import sqlite3\r\nimport os\r\nimport asyncio\r\nimport requests\r\nimport logging\r\nimport random\r\nimport datetime\r\n\r\nDATABASE_PATH = os.path.join(os.path.dirname(__file__), \'citiao.db\') #\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u521b\u5efa\uff0c\u5728/root/NapCat/app/scripts/citiao\r\nADMIN_DATABASE_PATH = os.path.join(\'/root/NapCat/app/\',\'admin.db\') #admin.db\u4f4d\u7f6e\r\nIMG_DIR = os.path.join(os.path.dirname(__file__), \'img\') #\u8bb0\u5f97\u63d0\u524d\u521b\u5efa\r\nwaiting_users = {}\r\n\r\ndef connect_db():\r\n    return sqlite3.connect(DATABASE_PATH, check_same_thread=False)\r\n\r\ndef connect_admin_db():\r\n    return sqlite3.connect(ADMIN_DATABASE_PATH, check_same_thread=False)\r\n\r\n#\u4fdd\u5b58\u56fe\u7247\uff0c\u9ed8\u8ba4\u522b\u540d\u4e3a\u672a\u8bbe\u7f6e\r\ndef save_image_to_db(qq_id, alias=\'\u672a\u8bbe\u7f6e\'):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'INSERT INTO yulu (qq_id, alias) VALUES (?, ?)\', (qq_id, alias))\r\n    image_id = cursor.lastrowid\r\n    conn.commit()\r\n    conn.close()\r\n    return image_id\r\n\r\n#\u666e\u901a\u7528\u6237\u5220\u9664\u56fe\u7247\u8fd8\u6709\u6570\u636e\u5e93\u4e2d\u5bf9\u5e94\u5185\u5bb9\r\ndef delete_image(qq_id, image_id):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'DELETE FROM yulu WHERE id = ? AND qq_id = ?\', (image_id, qq_id))\r\n    deleted = cursor.rowcount\r\n    conn.commit()\r\n    conn.close()\r\n    if deleted:\r\n        image_path = os.path.join(IMG_DIR, f"{image_id}.jpg")\r\n        if os.path.exists(image_path):\r\n            os.remove(image_path)\r\n    return deleted\r\n\r\n#\u7ba1\u7406\u5458\u7528\u6237\u5220\u9664\u56fe\u7247\u4e0e\u6570\u636e\u5e93\u5bf9\u5e94\u5185\u5bb9\r\ndef delete_image_admin(image_id):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'DELETE FROM yulu WHERE id = ?\', (image_id,))\r\n    deleted = cursor.rowcount\r\n    conn.commit()\r\n    conn.close()\r\n    if deleted:\r\n        image_path = os.path.join(IMG_DIR, f"{image_id}.jpg")\r\n        if os.path.exists(image_path):\r\n            os.remove(image_path)\r\n    return deleted\r\n\r\n#/yulu info\r\ndef get_user_images(qq_id):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'SELECT id, alias FROM yulu WHERE qq_id = ?\', (qq_id,))\r\n    rows = cursor.fetchall()\r\n    conn.close()\r\n    return rows\r\n\r\ndef get_image_path(image_id):\r\n    image_path = os.path.join(IMG_DIR, f"{image_id}.jpg")\r\n    return image_path if os.path.exists(image_path) else None\r\n\r\n#\u83b7\u53d6\u56fe\u7247\u5bf9\u5e94\u522b\u540d\r\ndef get_images_by_alias(alias):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'SELECT id, alias FROM yulu WHERE alias LIKE ?\', (\'%\' + alias + \'%\',))\r\n    rows = cursor.fetchall()\r\n    conn.close()\r\n    return rows\r\n\r\n#\u83b7\u53d6\u6240\u6709\u522b\u540d\r\ndef get_all_aliases():\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'SELECT DISTINCT alias FROM yulu\')\r\n    rows = cursor.fetchall()\r\n    conn.close()\r\n    return [row[0] for row in rows]\r\n\r\n#\u83b7\u53d6\u6240\u6709\u56fe\u7247\r\ndef get_all_images():\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'SELECT id FROM yulu\')\r\n    rows = cursor.fetchall()\r\n    conn.close()\r\n    return rows\r\n\r\n#\u5224\u65ad\u662f\u5426\u662f\u7ba1\u7406\u5458\r\ndef is_admin(qq_id):\r\n    conn = connect_admin_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'SELECT permissions FROM admin WHERE user_id = ?\', (qq_id,))\r\n    result = cursor.fetchone()\r\n    conn.close()\r\n    return result is not None and result[0] in (\'root\', \'admin\')\r\n\r\n#\u4e0b\u8f7d\u56fe\u7247\uff0c\u6700\u591a\u5c1d\u8bd53\u6b21\r\nasync def download_image(image_url):\r\n    retries = 3\r\n    for attempt in range(retries):\r\n        try:\r\n            response = requests.get(image_url)\r\n            response.raise_for_status()\r\n            return response.content\r\n        except requests.RequestException as e:\r\n            logging.error(f"Error downloading image: {e}")\r\n            if attempt < retries - 1:\r\n                logging.info(f"Retrying... ({attempt + 1}/{retries})")\r\n                await asyncio.sleep(2)\r\n            else:\r\n                logging.error("Max retries reached, giving up.")\r\n    return None\r\n\r\n#\u7528\u6237\u6dfb\u52a0\u56fe\u7247\u54cd\u5e94\r\nasync def add_image_from_reply(user_id, group_id, alias, image_url, send_group_message):\r\n    send_group_message(group_id, \'\u6b63\u5728\u6dfb\u52a0\uff0c\u8bf7\u7a0d\u540e\u2026\u2026\')\r\n    try:\r\n        image_data = await download_image(image_url)\r\n        if image_data:\r\n            image_id = save_image_to_db(user_id, alias)\r\n            image_path = os.path.join(IMG_DIR, f"{image_id}.jpg")\r\n            with open(image_path, \'wb\') as image_file:\r\n                image_file.write(image_data)\r\n            response_message = f"\u56fe\u7247\u5df2\u4fdd\u5b58\uff0cID\u4e3a {image_id}\uff0c\u522b\u540d\u4e3a {alias}\u3002"\r\n            send_group_message(group_id, response_message)\r\n        else:\r\n            response_message = "\u4e0b\u8f7d\u56fe\u7247\u65f6\u51fa\u9519\uff0c\u8bf7\u91cd\u8bd5\u3002"\r\n            send_group_message(group_id, response_message)\r\n    except Exception as e:\r\n        logging.error(f"Error saving image from reply: {e}")\r\n        response_message = "\u4fdd\u5b58\u56fe\u7247\u65f6\u51fa\u9519\uff0c\u8bf7\u91cd\u8bd5\u3002"\r\n        send_group_message(group_id, response_message)\r\n\r\n#rename\r\ndef update_image_alias(image_id, qq_id, new_alias):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'UPDATE yulu SET alias = ? WHERE id = ? AND qq_id = ?\', (new_alias, image_id, qq_id))\r\n    updated = cursor.rowcount\r\n    conn.commit()\r\n    conn.close()\r\n    return updated\r\n#admin rename\r\ndef update_image_alias_admin(image_id, new_alias):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'UPDATE yulu SET alias = ? WHERE id = ?\', (new_alias, image_id))\r\n    updated = cursor.rowcount\r\n    conn.commit()\r\n    conn.close()\r\n    return updated\r\n#\u672c\u7fa4\u662f\u5426\u5f00\u542fyulu\u529f\u80fd\r\ndef is_yulu_enabled(group_id):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'SELECT yulu_enabled FROM group_settings WHERE group_id = ?\', (group_id,))\r\n    result = cursor.fetchone()\r\n    conn.close()\r\n    return result is None or result[0] == 1\r\n#\u8bbe\u7f6e\u672c\u7fa4\u662f\u5426\u5f00\u542fyulu\u529f\u80fd\r\ndef set_yulu_enabled(group_id, enabled):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'INSERT OR REPLACE INTO group_settings (group_id, yulu_enabled) VALUES (?, ?)\', (group_id, 1 if enabled else 0))\r\n    conn.commit()\r\n    conn.close()\r\n#\u5220\u9664\u67d0\u4e00\u522b\u540d\u4e0b\u7684\u6240\u6709\u56fe\u7247\r\ndef delete_images_by_alias(alias):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute(\'SELECT id FROM yulu WHERE alias = ?\', (alias,))\r\n    rows = cursor.fetchall()\r\n    deleted_count = 0\r\n\r\n    for row in rows:\r\n        image_id = row[0]\r\n        cursor.execute(\'DELETE FROM yulu WHERE id = ?\', (image_id,))\r\n        deleted_count += cursor.rowcount\r\n        image_path = os.path.join(IMG_DIR, f"{image_id}.jpg")\r\n        if os.path.exists(image_path):\r\n            os.remove(image_path)\r\n\r\n    conn.commit()\r\n    conn.close()\r\n    return deleted_count\r\n\r\n#\u4e3b\u51fd\u6570\r\nasync def handle_yulu_command(message, raw_message, user_id, group_id, send_group_message):\r\n    if not is_yulu_enabled(group_id) and not message.startswith(\'/yulu enable\') and not message.startswith(\'/yulu disable\'):\r\n        send_group_message(group_id, "\u672c\u7fa4\u7684 \'yulu\' \u529f\u80fd\u5df2\u88ab\u7981\u7528\u3002")\r\n        return\r\n    parts = message.split(maxsplit=2)\r\n    if len(parts) >= 2:\r\n        subcommand = parts[1]\r\n        if subcommand == \'add\':\r\n            alias = parts[2] if len(parts) == 3 else \'\u672a\u8bbe\u7f6e\'\r\n            await handle_yulu_add(group_id, user_id, alias, send_group_message)\r\n        elif subcommand == \'del\' and len(parts) == 3:\r\n            image_id = int(parts[2])\r\n            if delete_image(user_id, image_id) or (is_admin(user_id) and delete_image_admin(image_id)):\r\n                send_group_message(group_id, f"\u56fe\u7247ID {image_id} \u5df2\u5220\u9664\u3002")\r\n            else:\r\n                send_group_message(group_id, "\u4f60\u6ca1\u6709\u6743\u9650\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002")\r\n        elif subcommand == \'dels\' and len(parts) == 3:\r\n            if is_admin(user_id):\r\n                alias = parts[2]\r\n                deleted_count = delete_images_by_alias(alias)\r\n                send_group_message(group_id, f"\u522b\u540d {alias} \u7684 {deleted_count} \u5f20\u56fe\u7247\u5df2\u5220\u9664\u3002")\r\n            else:\r\n                send_group_message(group_id, "\u4f60\u6ca1\u6709\u6743\u9650\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002")\r\n        elif subcommand == \'info\':\r\n            images = get_user_images(user_id)\r\n            if images:\r\n                response_message = "\u4f60\u6dfb\u52a0\u7684\u8bcd\u6761\u5982\u4e0b\uff1a\\n" + "\\n".join([f"ID\uff1a{img[0]} \u522b\u540d\uff1a{img[1]}" for img in images])\r\n            else:\r\n                response_message = "\u4f60\u6ca1\u6709\u6dfb\u52a0\u4efb\u4f55\u8bcd\u6761\u3002"\r\n            send_group_message(group_id, response_message)\r\n        elif subcommand == \'re\' and len(parts) == 3:\r\n            id_and_alias = parts[2].split(maxsplit=1)\r\n            if len(id_and_alias) == 2:\r\n                image_id = int(id_and_alias[0])\r\n                new_alias = id_and_alias[1]\r\n                if update_image_alias(image_id, user_id, new_alias) or (\r\n                        is_admin(user_id) and update_image_alias_admin(image_id, new_alias)):\r\n                    send_group_message(group_id, f"\u56fe\u7247ID {image_id} \u7684\u522b\u540d\u5df2\u4fee\u6539\u4e3a {new_alias}\u3002")\r\n                else:\r\n                    send_group_message(group_id, "\u4f60\u6ca1\u6709\u6743\u9650\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002")\r\n            else:\r\n                send_group_message(group_id, "\u547d\u4ee4\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u4f7f\u7528 /help \u67e5\u770b\u5e2e\u52a9\u4fe1\u606f\u3002")\r\n        elif subcommand == \'show\':\r\n            if len(parts) == 3:\r\n                try:\r\n                    image_id = int(parts[2])\r\n                    image_path = get_image_path(image_id)\r\n                    if image_path:\r\n                        logging.info(f"Sending image with ID {image_id}")\r\n                        send_group_message(group_id, f"[CQ:image,file=file://{image_path}]")\r\n                    else:\r\n                        send_group_message(group_id, f"\u672a\u627e\u5230ID\u4e3a{image_id}\u7684\u56fe\u7247\u3002")\r\n                except ValueError:\r\n                    alias = parts[2]\r\n                    image_ids = get_images_by_alias(alias)\r\n                    if image_ids:\r\n                        image_id = random.choice([img[0] for img in image_ids])\r\n                        image_path = get_image_path(image_id)\r\n                        logging.info(f"Sending image with alias {alias}")\r\n                        send_group_message(group_id, f"[CQ:image,file=file://{image_path}]")\r\n                    else:\r\n                        send_group_message(group_id, f"\u672a\u627e\u5230\u522b\u540d\u4e3a{alias}\u7684\u56fe\u7247\u3002")\r\n            else:\r\n                image_ids = get_all_images()\r\n                if image_ids:\r\n                    image_id = random.choice([img[0] for img in image_ids])\r\n                    image_path = get_image_path(image_id)\r\n                    logging.info(f"Sending random image with ID {image_id}")\r\n                    send_group_message(group_id, f"[CQ:image,file=file://{image_path}]")\r\n                else:\r\n                    send_group_message(group_id, "\u672a\u627e\u5230\u4efb\u4f55\u56fe\u7247\u3002")\r\n        elif subcommand == \'search\':\r\n            if len(parts) == 3:\r\n                alias = parts[2]\r\n                images = get_images_by_alias(alias)\r\n                if images:\r\n                    response_message = f"\u522b\u540d\u5305\u542b {alias} \u7684\u56fe\u7247ID\uff1a\\n" + "\\n".join([f"ID\uff1a{img[0]} \u522b\u540d\uff1a{img[1]}" for img in images])\r\n                else:\r\n                    response_message = f"\u672a\u627e\u5230\u522b\u540d\u5305\u542b {alias} \u7684\u56fe\u7247\u3002"\r\n                send_group_message(group_id, response_message)\r\n            else:\r\n                aliases = get_all_aliases()\r\n                if aliases:\r\n                    response_message = "\u6240\u6709\u522b\u540d\u5982\u4e0b\uff1a\\n" + "\\t".join(aliases)\r\n                else:\r\n                    response_message = "\u672a\u627e\u5230\u4efb\u4f55\u522b\u540d\u3002"\r\n                send_group_message(group_id, response_message)\r\n        elif subcommand == \'status\':\r\n            if is_admin(user_id):\r\n                await handle_yulu_status(group_id, send_group_message)\r\n            else:\r\n                send_group_message(group_id, "\u4f60\u6ca1\u6709\u6743\u9650\u6267\u884c\u6b64\u547d\u4ee4\u3002")\r\n        elif subcommand == \'enable\' and is_admin(user_id):\r\n            set_yulu_enabled(group_id, True)\r\n            send_group_message(group_id, "\u672c\u7fa4\u7684 \'yulu\' \u529f\u80fd\u5df2\u5f00\u542f\u3002")\r\n        elif subcommand == \'disable\' and is_admin(user_id):\r\n            set_yulu_enabled(group_id, False)\r\n            send_group_message(group_id, "\u672c\u7fa4\u7684 \'yulu\' \u529f\u80fd\u5df2\u7981\u7528\u3002")\r\n    else:\r\n        send_group_message(group_id, "\u547d\u4ee4\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u4f7f\u7528 /help \u67e5\u770b\u5e2e\u52a9\u4fe1\u606f\u3002")\r\n#\u7b49\u5f85\u7528\u6237\u6dfb\u52a0\uff0c\u7528\u7684\u662f\u6307\u4ee4\u7248\u4e0d\u662f/add\u7248\u672c\r\nasync def process_message(data, send_group_message):\r\n    user_id = str(data[\'user_id\'])\r\n    if user_id in waiting_users:\r\n        group_id = waiting_users[user_id]["group_id"]\r\n        alias = waiting_users[user_id]["alias"]\r\n        if waiting_users[user_id]["waiting"] and data[\'post_type\'] == \'message\' and data[\'message_type\'] == \'group\' and str(data[\'user_id\']) == user_id:\r\n            for item in data[\'message\']:\r\n                if item[\'type\'] == \'image\':\r\n                    waiting_users[user_id]["waiting"] = False\r\n                    image_url = item[\'data\'][\'url\']\r\n                    send_group_message(group_id, "\u6b63\u5728\u6dfb\u52a0\uff0c\u8bf7\u7a0d\u540e\u3002")\r\n                    try:\r\n                        image_data = await download_image(image_url)\r\n                        if image_data:\r\n                            image_id = save_image_to_db(user_id, alias)\r\n                            image_path = os.path.join(IMG_DIR, f"{image_id}.jpg")\r\n                            with open(image_path, \'wb\') as image_file:\r\n                                image_file.write(image_data)\r\n                            response_message = f"\u56fe\u7247\u5df2\u4fdd\u5b58\uff0cID\u4e3a {image_id}\u3002"\r\n                            send_group_message(group_id, response_message)\r\n                        else:\r\n                            response_message = "\u4e0b\u8f7d\u56fe\u7247\u65f6\u51fa\u9519\uff0c\u8bf7\u91cd\u8bd5\u3002"\r\n                            send_group_message(group_id, response_message)\r\n                    except Exception as e:\r\n                        logging.error(f"Error saving image: {e}")\r\n                        response_message = "\u4fdd\u5b58\u56fe\u7247\u65f6\u51fa\u9519\uff0c\u8bf7\u91cd\u8bd5\u3002"\r\n                        send_group_message(group_id, response_message)\r\n                    finally:\r\n                        del waiting_users[user_id]\r\n                    return\r\n            response_message = "\u60a8\u53d1\u9001\u7684\u4e0d\u662f\u56fe\u7247\uff0c\u8bf7\u91cd\u65b0\u53d1\u9001\u3002"\r\n            send_group_message(group_id, response_message)\r\n            del waiting_users[user_id]\r\n\r\nasync def handle_yulu_add(group_id, qq_id, alias, send_group_message):\r\n    response_message = "\u8bf7\u572830\u79d2\u5185\u53d1\u9001\u4e00\u5f20\u56fe\u7247\u3002"\r\n    send_group_message(group_id, response_message)\r\n\r\n    waiting_users[qq_id] = {"group_id": group_id, "alias": alias, "waiting": True}\r\n    await asyncio.sleep(30)\r\n    if qq_id in waiting_users and waiting_users[qq_id]["waiting"]:\r\n        del waiting_users[qq_id]\r\n        response_message = "\u6dfb\u52a0\u8bed\u5f55\u8d85\u65f6\uff0c\u8bf7\u91cd\u65b0\u6dfb\u52a0\u3002"\r\n        send_group_message(group_id, response_message)\r\n#\u67e5\u8be2\u72b6\u6001\r\nasync def handle_yulu_status(group_id, send_group_message):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n\r\n    cursor.execute(\'SELECT id, qq_id FROM yulu ORDER BY id DESC LIMIT 1\')\r\n    last_record = cursor.fetchone()\r\n    last_id, last_user = last_record if last_record else (None, None)\r\n\r\n    last_add_time = None\r\n    if last_id:\r\n        image_path = get_image_path(last_id)\r\n        if image_path:\r\n            last_add_time = datetime.datetime.fromtimestamp(os.path.getmtime(image_path)).strftime(\'%Y-%m-%d %H:%M:%S\')\r\n\r\n    cursor.execute(\'SELECT COUNT(DISTINCT alias) FROM yulu\')\r\n    total_aliases = cursor.fetchone()[0]\r\n\r\n    cursor.execute(\'SELECT COUNT(*) FROM yulu\')\r\n    total_images = cursor.fetchone()[0]\r\n\r\n    cursor.execute(\'SELECT alias, COUNT(*) as cnt FROM yulu WHERE alias != "\u672a\u8bbe\u7f6e" GROUP BY alias ORDER BY cnt DESC LIMIT 1\')\r\n    most_common_alias_record = cursor.fetchone()\r\n    most_common_alias, most_common_count = most_common_alias_record if most_common_alias_record else (None, 0)\r\n\r\n    cursor.execute(\'SELECT id FROM yulu WHERE alias = ?\', (most_common_alias,))\r\n    most_common_ids = cursor.fetchall()\r\n\r\n    cursor.execute(\'SELECT qq_id, COUNT(*) as cnt FROM yulu GROUP BY qq_id ORDER BY cnt DESC LIMIT 1\')\r\n    most_active_user_record = cursor.fetchone()\r\n    max_user, total_user_images = most_active_user_record if most_active_user_record else (None, 0)\r\n\r\n    conn.close()\r\n\r\n    response_message = (\r\n        f"\u6700\u8fd1\u4e00\u6761\u8bed\u5f55\u6dfb\u52a0\u4eba\uff1a{last_user}\uff0c\u6dfb\u52a0\u65f6\u95f4\uff1a{last_add_time}\uff0cID\u4e3a{last_id}\\n"\r\n        f"\u603b\u7684\u522b\u540d\u6570\u91cf\uff1a{total_aliases}\\n"\r\n        f"\u603b\u7684\u8bed\u5f55\u6570\u91cf\uff1a{total_images}\\n"\r\n        f"(\u9664\u53bb\u672a\u8bbe\u7f6e\u540e)\u5176\u4e2d\u6700\u591a\u7684\u8bed\u5f55\u662f {most_common_alias}\uff0cID\u5206\u522b\u662f\uff1a{\', \'.join(str(id[0]) for id in most_common_ids)}\\n"\r\n        f"\u5176\u4e2d\u6dfb\u52a0\u8bed\u5f55\u6700\u591a\u7684\u4eba\u662f {max_user}\uff0cTA\u4e00\u5171\u6dfb\u52a0\u4e86 {total_user_images} \u6761"\r\n    )\r\n\r\n    send_group_message(group_id, response_message)\r\n\n'})}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"\u251c\u2500\u2500 citiao.db\r\n\u251c\u2500\u2500 citiao.py\r\n\u251c\u2500\u2500 img/\r\n\u251c\u2500\u2500 init_db.py\r\n\u251c\u2500\u2500 update_db.py"}),"\n"]})]})}function g(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>_});var s=n(96540);const a={},i=s.createContext(a);function o(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function _(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);