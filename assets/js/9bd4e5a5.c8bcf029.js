"use strict";(self.webpackChunkmu_website=self.webpackChunkmu_website||[]).push([[8822],{42331:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>i,default:()=>c,frontMatter:()=>d,metadata:()=>o,toc:()=>m});var t=n(74848),s=n(28453);const d={},i="\u65e5\u5386\u63d0\u793a",o={id:"Blog/QQBot/\u65e5\u5386\u63d0\u793a",title:"\u65e5\u5386\u63d0\u793a",description:"2024-6-18",source:"@site/docs/Blog/05-QQBot/08-\u65e5\u5386\u63d0\u793a.md",sourceDirName:"Blog/05-QQBot",slug:"/Blog/QQBot/\u65e5\u5386\u63d0\u793a",permalink:"/docs/Blog/QQBot/\u65e5\u5386\u63d0\u793a",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Blog/05-QQBot/08-\u65e5\u5386\u63d0\u793a.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"Blog",previous:{title:"\u52a0\u7fa4\u9000\u7fa4\u76d1\u63a7",permalink:"/docs/Blog/QQBot/\u52a0\u7fa4\u9000\u7fa4\u76d1\u63a7"},next:{title:"\u7fa4\u53cb\u8bed\u5f55",permalink:"/docs/Blog/QQBot/\u7fa4\u53cb\u8bed\u5f55"}},a={},m=[{value:"\u529f\u80fd\u8bbe\u8ba1",id:"\u529f\u80fd\u8bbe\u8ba1",level:2},{value:"main.py",id:"mainpy",level:2},{value:"init_ts_db.py",id:"init_ts_dbpy",level:2},{value:"ts.py",id:"tspy",level:2}];function _(e){const r={code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"\u65e5\u5386\u63d0\u793a",children:"\u65e5\u5386\u63d0\u793a"}),"\n",(0,t.jsx)(r.p,{children:"2024-6-18"}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:"\u65e5\u5386\u63d0\u793a\u662f\u6307\u50cf\u624b\u673a\u65e5\u5386\u6216\u8005QQ\u63d0\u9192\u4e00\u6837\uff0c\u8bbe\u7f6e\u5728\u67d0\u4e2a\u65f6\u95f4\u8fdb\u884c\u63d0\u793a\uff0c\u4f8b\u5982\u57282024-6-18 12:00\u63d0\u9192\u5403\u5348\u996d"}),"\n",(0,t.jsx)(r.h2,{id:"\u529f\u80fd\u8bbe\u8ba1",children:"\u529f\u80fd\u8bbe\u8ba1"}),"\n",(0,t.jsx)(r.p,{children:"\u7528\u6237\u64cd\u4f5c\u5206\u4e3a\uff1a\u6dfb\u52a0\u63d0\u793a\u6d88\u606f\u3001\u5220\u9664\u63d0\u793a\u6d88\u606f\u3001\u67e5\u770b\u63d0\u793a\u6d88\u606f"}),"\n",(0,t.jsx)(r.p,{children:"\u811a\u672c\u8fd8\u9700\u505a\u5230\uff1a\u5728\u6307\u5b9a\u65f6\u95f4\u53d1\u9001\u63d0\u793a\u6d88\u606f\u3001\u7531\u4e8e\u662f\u6bcf\u79d2\u68c0\u6d4b\uff0c\u4e0d\u4f1a\u5728\u540c\u4e00\u5206\u949f\u5185\u4e00\u76f4\u53d1\u9001\u63d0\u793a\u6d88\u606f"}),"\n",(0,t.jsx)(r.p,{children:"\u56e0\u6b64\u5728\u5efa\u5e93\u7684\u65f6\u5019\uff0c\u9700\u8981\u5efa\u591a\u4e2a\u5b57\u6bb5\u6765\u4fdd\u8bc1\u53ef\u4ee5\u6b63\u5e38\u8fdb\u884c\u4e1a\u52a1"}),"\n",(0,t.jsx)(r.h2,{id:"mainpy",children:"main.py"}),"\n",(0,t.jsxs)(r.p,{children:["\u9996\u5148\u9700\u8981\u4fee\u6539\u7684\u5c31\u662fmain.py\u4e2d\u7684",(0,t.jsx)(r.code,{children:"schedule_tasks"}),"\uff0c\u4e4b\u524d\u7684",(0,t.jsx)(r.code,{children:"schedule_tasks"}),"\u662f\u7531\u4e8e\u8bcd\u4e91\u9700\u898123:59\u53d1\u6d88\u606f\uff0c\u8fd9\u6b21\u8fd8\u8981\u6dfb\u52a0\u4e00\u6761\u68c0\u6d4b\u65e5\u5386\u63d0\u793a\uff0c\u56e0\u6b64\u9700\u4fee\u6539\u4e3a:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:'def schedule_tasks():\r\n    schedule.every(1).seconds.do(lambda: check_reminders(send_group_message))\r\n    schedule.every().day.at("23:59").do(generate_daily_wordcloud)\r\n\r\n    while True:\r\n        schedule.run_pending()\r\n        time.sleep(1)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"init_ts_dbpy",children:"init_ts_db.py"}),"\n",(0,t.jsx)(r.p,{children:"\u4e3a\u4e86\u7528\u6237\u65b9\u4fbf\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e00\u4e2aid\u6765\u8fdb\u884c\u5220\u9664"}),"\n",(0,t.jsxs)(r.p,{children:["last_triggered\u5373\u6700\u540e\u4e00\u6b21\u53d1\u9001\u7684\u65f6\u95f4\uff0crepeat\u4ee3\u8868\u7684\u662f\u91cd\u590d\u7684\u661f\u671f\uff0c\u56e0\u4e3a\u7528\u6237\u53ef\u80fd\u4f1a\u6dfb\u52a0\u6bcf\u5468x\u7684xx",":xx","\u505a\u63d0\u9192\u67d0\u4e8b"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"import sqlite3\r\nimport os\r\n\r\nDATABASE_PATH = os.path.join(os.path.dirname(__file__), 'ts.db')\r\n\r\ndef create_db():\r\n    conn = sqlite3.connect(DATABASE_PATH)\r\n    cursor = conn.cursor()\r\n    cursor.execute('''\r\n    CREATE TABLE IF NOT EXISTS reminders (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        user_id TEXT NOT NULL,\r\n        group_id TEXT NOT NULL,\r\n        date TEXT,\r\n        time TEXT NOT NULL,\r\n        message TEXT NOT NULL,\r\n        repeat TEXT,\r\n        last_triggered TEXT\r\n    )\r\n    ''')\r\n    conn.commit()\r\n    conn.close()\r\n\r\nif __name__ == '__main__':\r\n    create_db()\r\n\n"})}),"\n",(0,t.jsx)(r.h2,{id:"tspy",children:"ts.py"}),"\n",(0,t.jsx)(r.p,{children:"\u6dfb\u52a0\u5305\u62ec\u4e09\u79cd\u6dfb\u52a0\u65b9\u5f0f\uff1a"}),"\n",(0,t.jsxs)(r.p,{children:["\u6dfb\u52a0\u5f53\u5929\u7684xx",":xx","\u8fdb\u884c\u63d0\u793a\uff1a/ts xx",":xx"," message"]}),"\n",(0,t.jsxs)(r.p,{children:["\u6dfb\u52a0\u4eca\u5e74\u7684\u67d0\u6708\u67d0\u65e5xx",":xx","\u8fdb\u884c\u63d0\u793a\uff1a/ts xx-xx xx",":xx"," message"]}),"\n",(0,t.jsxs)(r.p,{children:["\u6dfb\u52a0\u91cd\u590d\u7684\u5468\u51e0\u7684xx",":xx","\u8fdb\u884c\u63d0\u793a\uff1a/ts [1-7] xx",":xx"," message"]}),"\n",(0,t.jsx)(r.p,{children:"\u5220\u9664\u90e8\u5206\u548c\u67e5\u8be2\u90e8\u5206\u8ddf\u5176\u4ed6\u7684\u5dee\u4e0d\u591a\uff0c\u770b\u4ee3\u7801"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"import re\r\nimport sqlite3\r\nimport logging\r\nfrom datetime import datetime, timedelta\r\nimport os\r\n\r\nDATABASE_PATH = os.path.join(os.path.dirname(__file__), 'ts.db')\r\n\r\ndef connect_db():\r\n    return sqlite3.connect(DATABASE_PATH)\r\n\r\ndef handle_ts_command(message, user_id, group_id, send_group_message):\r\n    try:\r\n        parts = message.split(maxsplit=2)\r\n        if len(parts) < 2:\r\n            send_group_message(group_id, \"\u547d\u4ee4\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u8f93\u5165 /help ts\u67e5\u770b\u5e2e\u52a9\")\r\n            return\r\n\r\n        command = parts[1].lower()\r\n        if command == \"info\":\r\n            reminders = get_user_reminders(user_id, group_id)\r\n            if reminders:\r\n                reminders_text = \"\\n\".join([f\"{i+1}. {reminder['datetime']} {reminder['message']}\" for i, reminder in enumerate(reminders)])\r\n                send_group_message(group_id, f\"\u4f60\u7684\u63d0\u9192\uff1a\\n{reminders_text}\")\r\n            else:\r\n                send_group_message(group_id, \"\u4f60\u6ca1\u6709\u8bbe\u7f6e\u4efb\u4f55\u63d0\u9192\u3002\")\r\n        elif command == \"del\" and len(parts) == 3:\r\n            reminder_index = int(parts[2]) - 1\r\n            success = delete_user_reminder(user_id, group_id, reminder_index)\r\n            if success:\r\n                send_group_message(group_id, f\"\u5df2\u5220\u9664\u63d0\u9192\uff0c\u5e8f\u53f7\u4e3a{reminder_index + 1}\")\r\n            else:\r\n                send_group_message(group_id, f\"\u672a\u627e\u5230\u5e8f\u53f7\u4e3a{reminder_index + 1}\u7684\u63d0\u9192\u3002\")\r\n        else:\r\n            match = re.match(r'^/ts (\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{2}) (.+)$', message)\r\n            if match:\r\n                datetime_str = match.group(1)\r\n                reminder_message = match.group(2)\r\n                try:\r\n                    date_time_obj = datetime.strptime(datetime_str, '%m-%d %H:%M')\r\n                    if date_time_obj < datetime.now():\r\n                        send_group_message(group_id, \"\u4e0d\u80fd\u8bbe\u7f6e\u8fc7\u53bb\u7684\u65f6\u95f4\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\u3002\")\r\n                        return\r\n                    date_str = f\"{datetime.now().year}-{datetime_str.split()[0]}\"\r\n                    time_str = datetime_str.split()[1]\r\n                    insert_reminder(user_id, group_id, date_str, time_str, reminder_message, None)\r\n                    send_group_message(group_id, f\"\u63d0\u9192\u5df2\u8bbe\u7f6e\uff1a{datetime_str} {reminder_message}\")\r\n                except ValueError:\r\n                    send_group_message(group_id, \"\u65e5\u671f\u65f6\u95f4\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u4f7f\u7528 MM-DD HH:MM \u683c\u5f0f\")\r\n            else:\r\n                match = re.match(r'^/ts (\\d{1,2}:\\d{2}) (.+)$', message)\r\n                if match:\r\n                    time_str = match.group(1)\r\n                    reminder_message = match.group(2)\r\n                    try:\r\n                        time_obj = datetime.strptime(time_str, '%H:%M').time()\r\n                        if time_obj.hour >= 24 or time_obj.minute >= 60:\r\n                            send_group_message(group_id, \"\u65f6\u95f4\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u4f7f\u7528 HH:MM \u683c\u5f0f\")\r\n                            return\r\n                        if datetime.combine(datetime.now().date(), time_obj) < datetime.now():\r\n                            send_group_message(group_id, \"\u4e0d\u80fd\u8bbe\u7f6e\u8fc7\u53bb\u7684\u65f6\u95f4\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\u3002\")\r\n                            return\r\n                        insert_reminder(user_id, group_id, datetime.now().strftime('%Y-%m-%d'), time_str, reminder_message, None)\r\n                        send_group_message(group_id, f\"\u63d0\u9192\u5df2\u8bbe\u7f6e\uff1a{time_str} {reminder_message}\")\r\n                    except ValueError:\r\n                        send_group_message(group_id, \"\u65f6\u95f4\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u4f7f\u7528 HH:MM \u683c\u5f0f\")\r\n                else:\r\n                    match = re.match(r'^/ts ([1-7]+) (\\d{1,2}:\\d{2}) (.+)$', message)\r\n                    if match:\r\n                        repeat_days = match.group(1)\r\n                        time_str = match.group(2)\r\n                        reminder_message = match.group(3)\r\n                        if not all(day in '1234567' for day in repeat_days):\r\n                            send_group_message(group_id, \"\u91cd\u590d\u65e5\u671f\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u4f7f\u75281-7\u8868\u793a\u5468\u4e00\u5230\u5468\u65e5\u3002\")\r\n                            return\r\n                        insert_reminder(user_id, group_id, None, time_str, reminder_message, repeat_days)\r\n                        send_group_message(group_id, f\"\u91cd\u590d\u63d0\u9192\u5df2\u8bbe\u7f6e\uff1a\u6bcf\u5468{repeat_days}\u7684 {time_str} {reminder_message}\")\r\n                    else:\r\n                        send_group_message(group_id, \"\u65f6\u95f4\u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u4f7f\u7528 HH:MM \u683c\u5f0f\u6216 MM-DD HH:MM \u683c\u5f0f\")\r\n    except Exception as e:\r\n        logging.error(f\"Error processing /ts command: {e}\")\r\n        send_group_message(group_id, \"\u547d\u4ee4\u5904\u7406\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\uff0c\u8bf7\u91cd\u8bd5\u3002\")\r\n\r\ndef get_user_reminders(user_id, group_id):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute('''\r\n    SELECT id, date, time, message, repeat\r\n    FROM reminders\r\n    WHERE user_id = ? AND group_id = ?\r\n    ''', (user_id, group_id))\r\n    rows = cursor.fetchall()\r\n    conn.close()\r\n    reminders = []\r\n    for row in rows:\r\n        reminder_id, date, time, message, repeat = row\r\n        datetime_str = f\"{date} {time}\" if date else f\"\u6bcf\u5468{repeat}\u7684 {time}\"\r\n        reminders.append({\r\n            'id': reminder_id,\r\n            'datetime': datetime_str,\r\n            'message': message,\r\n            'repeat': repeat\r\n        })\r\n    return reminders\r\n\r\ndef delete_user_reminder(user_id, group_id, reminder_index):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute('''\r\n    SELECT id FROM reminders\r\n    WHERE user_id = ? AND group_id = ?\r\n    ''', (user_id, group_id))\r\n    rows = cursor.fetchall()\r\n    if reminder_index < 0 or reminder_index >= len(rows):\r\n        return False\r\n    reminder_id = rows[reminder_index][0]\r\n    cursor.execute('''\r\n    DELETE FROM reminders\r\n    WHERE id = ?\r\n    ''', (reminder_id,))\r\n    conn.commit()\r\n    conn.close()\r\n    return True\r\n\r\ndef insert_reminder(user_id, group_id, date, time, message, repeat):\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute('''\r\n    INSERT INTO reminders (user_id, group_id, date, time, message, repeat, last_triggered)\r\n    VALUES (?, ?, ?, ?, ?, ?, NULL)\r\n    ''', (user_id, group_id, date, time, message, repeat))\r\n    conn.commit()\r\n    conn.close()\r\n\r\ndef check_reminders(send_group_message):\r\n    now = datetime.now()\r\n    now_str = now.strftime('%Y-%m-%d %H:%M')\r\n    one_minute_ago_str = (now - timedelta(minutes=1)).strftime('%Y-%m-%d %H:%M')\r\n    conn = connect_db()\r\n    cursor = conn.cursor()\r\n    cursor.execute('''\r\n    SELECT id, user_id, group_id, message, repeat, last_triggered\r\n    FROM reminders\r\n    WHERE (datetime(date || ' ' || time) <= ? OR (repeat IS NOT NULL AND time = ?))\r\n    AND (last_triggered IS NULL OR last_triggered < ?)\r\n    ''', (now_str, now.strftime('%H:%M'), one_minute_ago_str))\r\n    rows = cursor.fetchall()\r\n\r\n    for row in rows:\r\n        reminder_id, user_id, group_id, message, repeat, last_triggered = row\r\n        logging.info(f\"Sending reminder for user_id: {user_id}, group_id: {group_id}, message: {message}\")\r\n        send_group_message(group_id, f\"[CQ:at,qq={user_id}] {message}\")\r\n\r\n        now_str_for_update = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\r\n\r\n        if not repeat:\r\n            cursor.execute('DELETE FROM reminders WHERE id = ?', (reminder_id,))\r\n        else:\r\n            next_date = get_next_date(repeat)\r\n            cursor.execute('UPDATE reminders SET last_triggered = ?, date = ? WHERE id = ?',\r\n                           (now_str_for_update, next_date, reminder_id))\r\n\r\n    conn.commit()\r\n    conn.close()\r\n\r\ndef get_next_date(repeat, current_date=None):\r\n    if not current_date:\r\n        current_date = datetime.now().strftime('%Y-%m-%d')\r\n    current_day = datetime.strptime(current_date, '%Y-%m-%d').weekday() + 1  # Monday is 1 and Sunday is 7\r\n    repeat_days = [int(day) for day in repeat]\r\n    next_day = min(\r\n        [day for day in repeat_days if day > current_day] + [day + 7 for day in repeat_days if day <= current_day])\r\n    delta_days = next_day - current_day\r\n    return (datetime.strptime(current_date, '%Y-%m-%d') + timedelta(days=delta_days)).strftime('%Y-%m-%d')\r\n\n"})})]})}function c(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(_,{...e})}):_(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var t=n(96540);const s={},d=t.createContext(s);function i(e){const r=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(d.Provider,{value:r},e.children)}}}]);