"use strict";(self.webpackChunkmu_website=self.webpackChunkmu_website||[]).push([[7595],{66482:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var t=n(74848),s=n(28453);const i={},o="github\u76d1\u63a7",u={id:"Blog/QQBot/github\u76d1\u63a7",title:"github\u76d1\u63a7",description:"2024-6-13 \\~ 2024-6-14",source:"@site/docs/Blog/05-QQBot/03-github\u76d1\u63a7.md",sourceDirName:"Blog/05-QQBot",slug:"/Blog/QQBot/github\u76d1\u63a7",permalink:"/docs/Blog/QQBot/github\u76d1\u63a7",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Blog/05-QQBot/03-github\u76d1\u63a7.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"Blog",previous:{title:"\u811a\u672c\u529f\u80fd\u7f16\u5199\u2014\u2014bilibili\u673a\u5668\u4eba\u4e3a\u4f8b",permalink:"/docs/Blog/QQBot/\u811a\u672c\u529f\u80fd\u7f16\u5199"},next:{title:"BOT\u7ba1\u7406\u5458",permalink:"/docs/Blog/QQBot/BOT\u7ba1\u7406\u5458"}},a={},d=[{value:"\u529f\u80fd\u8bbe\u8ba1",id:"\u529f\u80fd\u8bbe\u8ba1",level:2},{value:"\u4fee\u6539main.py",id:"\u4fee\u6539mainpy",level:2},{value:"githubs.py",id:"githubspy",level:2},{value:"update.py",id:"updatepy",level:2},{value:"init_github.py",id:"init_githubpy",level:2}];function p(e){const r={code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"github\u76d1\u63a7",children:"github\u76d1\u63a7"}),"\n",(0,t.jsx)(r.p,{children:"2024-6-13 ~ 2024-6-14"}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"\u529f\u80fd\u8bbe\u8ba1",children:"\u529f\u80fd\u8bbe\u8ba1"}),"\n",(0,t.jsx)(r.p,{children:"\u9996\u5148\u8fd8\u662f\u521d\u6b65\u8bbe\u8ba1\u4e00\u4e0b\u6846\u67b6"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-txt",children:"|--main.py\r\n|---scripts/\r\n|  |github/\r\n|     |githubs.py\r\n|     |update.py\r\n|     |github.db\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u5176\u4e2dgithubs.py\u4e3b\u8981\u529f\u80fd\u662f\u7528\u6237\u6dfb\u52a0\u4e0e\u5220\u9664\u76d1\u63a7\uff0c\u7531\u4e8egithub\u8fd9\u4e2a\u4e1c\u897f\u5427\u81ea\u5df1\u5173\u6ce8\u4e86\u4e0d\u4ee3\u8868\u522b\u4eba\u60f3\u5173\u6ce8\uff0c\u56e0\u6b64\u5c31\u4e0d\u6253\u7b97\u7fa4\u53d1\u4e86\uff0c\u5e76\u4e14\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\uff0c\u5373"}),"\n",(0,t.jsx)(r.p,{children:"\u7528\u6237\u6dfb\u52a0\u4e00\u4e2a\u8d26\u53f7A\uff0c\u811a\u672c\u5904\u7406\u8bfb\u53d6\u5176following\uff0c\u7136\u540e\u5bf9following\u7684\u7528\u6237\u5206\u522b\u8bfb\u53d6repo\uff0c\u5bf9\u4e8erepo\u5728\u6307\u5b9a\u65f6\u95f4\u5185\u66f4\u65b0\u7684\uff0c\u5c31\u901a\u8fc7\u79c1\u804a\u7684\u65b9\u5f0f\u53d1\u9001\u7ed9\u8be5\u7528\u6237\u3002\u540c\u65f6\u4e3a\u4e86\u9650\u5236\u4e00\u4e2a\u4eba\u53ea\u80fd\u53d1\u9001\u4e00\u4e2a\u8d26\u53f7\uff0c\u4e5f\u9700\u8981\u8fdb\u884c\u5224\u65ad\u3002\u8fd9\u91cc\u4e0d\u6253\u7b97\u5355\u72ec\u6dfb\u52a0github\u8d26\u53f7\u7684\u539f\u56e0\u662f\uff1a\u7528\u6237\u5355\u72ec\u6dfb\u52a0\u4e5f\u9ebb\u70e6\uff0c\u5e76\u4e14\u81ea\u5df1\u6ca1following\u8fd8\u6084\u6084\u5173\u6ce8\u6709\u70b9\u602a\u3002"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-txt",children:"\u4ec5\u53ef\u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\u540d\uff08\u4ee5additionalName\u4e3a\u51c6\uff0c\u5373github.com/XXX\u4e2d\u7684XXX\uff09\uff0c\u5982\u679c\u8be5\u7528\u6237\u5173\u6ce8\u7684\u5176\u4ed6\u7528\u6237\u7684github\u6709\u66f4\u65b0\uff0c\u4f1a\u4ee5\u79c1\u4fe1\u7684\u65b9\u5f0f\u53d1\u9001\u3002\u540c\u65f6\u4e00\u4e2a\u4eba\u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\u3002\r\n/github add [username] \u6dfb\u52a0github\u7528\u6237\r\n/github del [username] \u5220\u9664github\u7528\u6237\r\n/github info \u67e5\u770b\u5f53\u524d\u76d1\u63a7\u7528\u6237\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u9996\u5148\u662f\u5b89\u88c5\u4e00\u4e9b\u8981\u7528\u5230\u7684\u5e93"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-sh",children:"pip install schedule\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u7136\u540e\u5c31\u662f\u5f00\u59cb\u5199\u811a\u672c"}),"\n",(0,t.jsx)(r.h2,{id:"\u4fee\u6539mainpy",children:"\u4fee\u6539main.py"}),"\n",(0,t.jsx)(r.p,{children:"\u7531\u4e8e\u6ca1\u6709\u4ee4\u724c\uff0c\u62ffgithub api\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u9650\u5236\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981\u53bb\u7533\u8bf7\u4e00\u4e0bgithub API\u4ee4\u724c\uff0c\u6743\u9650\u7ed9repo\u548cuser\u5c31\u53ef\u4ee5\u4e86"}),"\n",(0,t.jsx)(r.p,{children:"\u7136\u540emain.py\u4fee\u6539\u8fd9\u6837\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"from scripts.bilibili.bilibili import handle_bili_command\r\nfrom scripts.bilibili.update import main as bili_update_main\r\nfrom scripts.github.githubs import handle_git_command\r\nfrom scripts.github.update import main as github_update_main\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u7136\u540e\u5462\u8fd9\u4e2a\u5f97\u52a0\u4e0a\u597d\u53cb\uff0c\u6240\u4ee5\u9700\u8981\u6dfb\u52a0\u597d\u53cb\u5904\u7406"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"def accept_friend_request(flag):\r\n    url = f\"{base_url}/set_friend_add_request\"\r\n    params = {\r\n        \"flag\": flag,\r\n        \"approve\": 'true',\r\n        \"access_token\": access_token\r\n    }\r\n    requests.get(url, params=params)\r\n    \r\n\u2026\u2026\u2026\u2026\r\ndef receive_event():\r\n    elif data['post_type'] == 'request' and data['request_type'] == 'friend':\r\n        flag = data['flag']\r\n        accept_friend_request(flag)\n"})}),"\n",(0,t.jsx)(r.h2,{id:"githubspy",children:"githubs.py"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"import requests\r\nimport sqlite3\r\nimport os\r\n\r\nDATABASE_PATH = os.path.join(os.path.dirname(__file__), 'github.db')\r\n\r\nasync def handle_git_command(message, user_id, group_id, send_group_message, send_private_message, github_token):\r\n    parts = message.split()\r\n    if len(parts) < 2:\r\n        send_group_message(group_id, \"\u547d\u4ee4\u683c\u5f0f\u9519\u8bef\u3002\")\r\n        return\r\n\r\n    command = parts[1].lower()\r\n    if command == 'add' and len(parts) == 3:\r\n        username = parts[2]\r\n        if not check_github_user_exists(username, github_token):\r\n            send_group_message(group_id, f\"GitHub \u7528\u6237 {username} \u4e0d\u5b58\u5728\u3002\")\r\n            return\r\n        add_user(user_id, username, group_id, send_group_message)\r\n    elif command == 'del' and len(parts) == 3:\r\n        username = parts[2]\r\n        delete_user(user_id, username, group_id, send_group_message)\r\n    elif command == 'info':\r\n        info_user(user_id, group_id, send_group_message)\r\n    else:\r\n        send_group_message(group_id, \"\u547d\u4ee4\u683c\u5f0f\u9519\u8bef\u3002\")\r\n\r\ndef check_github_user_exists(username, github_token):\r\n    url = f'https://api.github.com/users/{username}'\r\n    headers = {'Authorization': f'token {github_token}'}\r\n    response = requests.get(url, headers=headers)\r\n    return response.status_code == 200\r\n\r\ndef add_user(user_id, username, group_id, send_group_message):\r\n    conn = sqlite3.connect(DATABASE_PATH)\r\n    cursor = conn.cursor()\r\n    cursor.execute('INSERT OR REPLACE INTO github_users (user_id, github_username) VALUES (?, ?)',\r\n                   (user_id, username))\r\n    conn.commit()\r\n    conn.close()\r\n    send_group_message(group_id, f\"\u5df2\u6dfb\u52a0\u76d1\u63a7 GitHub \u7528\u6237: {username}\")\r\n\r\ndef delete_user(user_id, username, group_id, send_group_message):\r\n    conn = sqlite3.connect(DATABASE_PATH)\r\n    cursor = conn.cursor()\r\n    cursor.execute('DELETE FROM github_users WHERE user_id = ? AND github_username = ?',\r\n                   (user_id, username))\r\n    conn.commit()\r\n    conn.close()\r\n    send_group_message(group_id, f\"\u5df2\u5220\u9664\u76d1\u63a7 GitHub \u7528\u6237: {username}\")\r\n\r\ndef info_user(user_id, group_id, send_group_message):\r\n    conn = sqlite3.connect(DATABASE_PATH)\r\n    cursor = conn.cursor()\r\n    cursor.execute('SELECT github_username FROM github_users WHERE user_id = ?', (user_id,))\r\n    row = cursor.fetchone()\r\n    conn.close()\r\n    if row:\r\n        send_group_message(group_id, f\"\u5f53\u524d\u76d1\u63a7\u7684 GitHub \u7528\u6237: {row[0]}\")\r\n    else:\r\n        send_group_message(group_id, \"\u5f53\u524d\u6ca1\u6709\u76d1\u63a7\u7684 GitHub \u7528\u6237\u3002\")\r\n\n"})}),"\n",(0,t.jsx)(r.h2,{id:"updatepy",children:"update.py"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"import requests\r\nimport sqlite3\r\nimport schedule\r\nimport time\r\nimport os\r\nfrom datetime import datetime, timedelta\r\nimport logging\r\n\r\nDATABASE_PATH = os.path.join(os.path.dirname(__file__), 'github.db')\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\ndef get_following(username, github_token):\r\n    url = f'https://api.github.com/users/{username}/following'\r\n    headers = {'Authorization': f'token {github_token}'}\r\n    response = requests.get(url, headers=headers)\r\n    try:\r\n        response.raise_for_status()\r\n        data = response.json()\r\n        if isinstance(data, list):\r\n            return [user['login'] for user in data]\r\n        else:\r\n            logging.error(f\"Unexpected response format: {data}\")\r\n            return []\r\n    except requests.RequestException as e:\r\n        logging.error(f\"Failed to fetch following users: {e}\")\r\n        return []\r\n\r\ndef get_recent_repos(username, github_token):\r\n    url = f'https://api.github.com/users/{username}/repos'\r\n    headers = {'Authorization': f'token {github_token}'}\r\n    response = requests.get(url, headers=headers)\r\n    try:\r\n        response.raise_for_status()\r\n        repos = response.json()\r\n        recent_repos = []\r\n        for repo in repos:\r\n            updated_at = datetime.strptime(repo['updated_at'], '%Y-%m-%dT%H:%M:%SZ')\r\n            pushed_at = datetime.strptime(repo['pushed_at'], '%Y-%m-%dT%H:%M:%SZ')\r\n            if datetime.utcnow() - updated_at <= timedelta(minutes=2) or datetime.utcnow() - pushed_at <= timedelta(minutes=2):\r\n                recent_repos.append(repo)\r\n        return recent_repos\r\n    except requests.RequestException as e:\r\n        logging.error(f\"Failed to fetch repositories: {e}\")\r\n        return []\r\n\r\ndef check_updates(send_private_message, github_token):\r\n    conn = sqlite3.connect(DATABASE_PATH)\r\n    cursor = conn.cursor()\r\n    cursor.execute('SELECT user_id, github_username FROM github_users')\r\n    rows = cursor.fetchall()\r\n    for row in rows:\r\n        user_id = row[0]\r\n        github_username = row[1]\r\n        following_users = get_following(github_username, github_token)\r\n        for user in following_users:\r\n            recent_repos = get_recent_repos(user, github_token)\r\n            for repo in recent_repos:\r\n                updated_at = datetime.utcnow() + timedelta(hours=8)\r\n                updated_time = updated_at.strftime('%Y-%m-%d %H:%M:%S')\r\n                time_diff = updated_at - datetime.strptime(repo['updated_at'], '%Y-%m-%dT%H:%M:%SZ')\r\n                if time_diff < timedelta(minutes=1):\r\n                    time_message = \"Updated now\"\r\n                elif time_diff < timedelta(minutes=2):\r\n                    time_message = \"Updated 1 minute ago\"\r\n                else:\r\n                    time_message = \"Updated 2 minutes ago\"\r\n                logging.info(f\"Sending update for repo {repo['name']} to user {user_id}\")\r\n                send_private_message(user_id, f\"{user} updated repository {repo['name']} at {repo['html_url']} ({time_message})\")\r\n    conn.close()\r\n\r\ndef start_update_schedule(send_private_message, github_token):\r\n    schedule.every(2).minutes.do(check_updates, send_private_message, github_token)\r\n\r\n    while True:\r\n        schedule.run_pending()\r\n        time.sleep(1)\r\n\r\ndef main(send_private_message, github_token):\r\n    start_update_schedule(send_private_message, github_token)\r\n\r\nif __name__ == '__main__':\r\n    github_token = \"\"  # \u66ff\u6362\u4e3a\u4f60\u7684GitHub API\u4ee4\u724c\r\n    main(print, github_token)\r\n\n"})}),"\n",(0,t.jsx)(r.h2,{id:"init_githubpy",children:"init_github.py"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-python",children:"import sqlite3\r\nimport os\r\n\r\nDATABASE_PATH = os.path.join(os.path.dirname(__file__), 'github.db')\r\n\r\nconn = sqlite3.connect(DATABASE_PATH)\r\ncursor = conn.cursor()\r\ncursor.execute('''\r\nCREATE TABLE IF NOT EXISTS github_users (\r\n    user_id TEXT PRIMARY KEY,\r\n    github_username TEXT\r\n)\r\n''')\r\nconn.commit()\r\nconn.close()\r\n\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u6700\u540e\u5148\u8fd0\u884cinit_github.py\uff0c\u518d\u8fd0\u884cmain.py\u5373\u53ef"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-txt",children:"\u251c\u2500\u2500 help.txt\r\n\u251c\u2500\u2500 main.py\r\n\u251c\u2500\u2500 scripts\r\n\u2502\xa0\xa0 \u251c\u2500\u2500 bilibili\r\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 __pycache__\r\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 bilibili.cpython-310.pyc\r\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 update.cpython-310.pyc\r\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 bilibili.db\r\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 bilibili.py\r\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 initialize_db.py\r\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 log.txt\r\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 update.py\r\n\u2502\xa0\xa0 \u2514\u2500\u2500 github\r\n\u2502\xa0\xa0     \u251c\u2500\u2500 __pycache__\r\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u251c\u2500\u2500 githubs.cpython-310.pyc\r\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u2514\u2500\u2500 update.cpython-310.pyc\r\n\u2502\xa0\xa0     \u251c\u2500\u2500 github.db\r\n\u2502\xa0\xa0     \u251c\u2500\u2500 githubs.py\r\n\u2502\xa0\xa0     \u251c\u2500\u2500 init_github.py\r\n\u2502\xa0\xa0     \u2514\u2500\u2500 update.py\n"})})]})}function c(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>u});var t=n(96540);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function u(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);