"use strict";(self.webpackChunkmu_website=self.webpackChunkmu_website||[]).push([[4611],{80574:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>o});var i=e(74848),t=e(28453);const a={},c="\u5e38\u7528\u811a\u672c",s={id:"tools_and_other/\u5e38\u7528\u811a\u672c",title:"\u5e38\u7528\u811a\u672c",description:"\u90e8\u5206\u811a\u672c\u6765\u6e90\u4e8e\u7f51\u7edc\uff0c\u9700\u8981\u7684\u81ea\u53d6\uff0c\u4e0d\u9700\u8981\u7684\u4e0d\u53d6",source:"@site/docs/tools_and_other/02-\u5e38\u7528\u811a\u672c.md",sourceDirName:"tools_and_other",slug:"/tools_and_other/\u5e38\u7528\u811a\u672c",permalink:"/docs/tools_and_other/\u5e38\u7528\u811a\u672c",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tools_and_other/02-\u5e38\u7528\u811a\u672c.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tools-others",previous:{title:"\u5176\u4ed6",permalink:"/docs/tools_and_other/index"},next:{title:"\u5b9e\u7528\u5de5\u5177",permalink:"/docs/tools_and_other/\u5b9e\u7528\u5de5\u5177"}},d={},o=[{value:"\u7206\u7834\u591a\u4e2a\u538b\u7f29\u5305CRC",id:"\u7206\u7834\u591a\u4e2a\u538b\u7f29\u5305crc",level:3},{value:"\u81ea\u52a8\u8bfb\u53d6CRC\u7206\u7834\u56fe\u7247\u9ad8\u5bbd",id:"\u81ea\u52a8\u8bfb\u53d6crc\u7206\u7834\u56fe\u7247\u9ad8\u5bbd",level:3},{value:"\u538b\u7f29\u5305\u540d\u5b57\u89e3\u538b\u5bc6\u7801\u4e3a\u6700\u5916\u5c42\u538b\u7f29\u5305",id:"\u538b\u7f29\u5305\u540d\u5b57\u89e3\u538b\u5bc6\u7801\u4e3a\u6700\u5916\u5c42\u538b\u7f29\u5305",level:3},{value:"\u8bfb\u53d6\u538b\u7f29\u5305\u540d\u5b57\u81ea\u52a8\u89e3\u538b",id:"\u8bfb\u53d6\u538b\u7f29\u5305\u540d\u5b57\u81ea\u52a8\u89e3\u538b",level:3},{value:"Adam7\u5c0f\u56fe\u5408\u6210\u5927\u56fe",id:"adam7\u5c0f\u56fe\u5408\u6210\u5927\u56fe",level:3},{value:"python2-base64\u9690\u5199\u89e3\u5bc6",id:"python2-base64\u9690\u5199\u89e3\u5bc6",level:3},{value:"BMP\u7b2c1\u6b65-\u7206\u7834\u5bbd\u5ea6",id:"bmp\u7b2c1\u6b65-\u7206\u7834\u5bbd\u5ea6",level:3},{value:"BMP\u7b2c\u4e8c\u6b65\u7206\u7834\u957f\u5ea6",id:"bmp\u7b2c\u4e8c\u6b65\u7206\u7834\u957f\u5ea6",level:3},{value:"\u7206\u7834emoji-aes",id:"\u7206\u7834emoji-aes",level:3},{value:"cloacked-pixel\u7206\u7834",id:"cloacked-pixel\u7206\u7834",level:3},{value:"CRCcrack",id:"crccrack",level:3},{value:"deepsound2john",id:"deepsound2john",level:3},{value:"MTP\u4e00\u6b21\u591a\u5bc6",id:"mtp\u4e00\u6b21\u591a\u5bc6",level:3},{value:"RSA\u5e38\u89c1\u4e00\u628a\u68ad",id:"rsa\u5e38\u89c1\u4e00\u628a\u68ad",level:3},{value:"Vigenere\u52a0\u5bc6(\u57fa\u4e8e\u8bcd\u9891\u5206\u6790\uff0c\u53ef\u5f02\u6216)",id:"vigenere\u52a0\u5bc6\u57fa\u4e8e\u8bcd\u9891\u5206\u6790\u53ef\u5f02\u6216",level:3},{value:"\u7206\u7834base64\u5927\u5c0f\u5199",id:"\u7206\u7834base64\u5927\u5c0f\u5199",level:3},{value:"\u51b0\u874exor\u89e3\u5bc6-php",id:"\u51b0\u874exor\u89e3\u5bc6-php",level:3},{value:"\u89e3\u538bzip rar targz\u5957\u5a03",id:"\u89e3\u538bzip-rar-targz\u5957\u5a03",level:3},{value:"\u732b\u8138\u53d8\u6362",id:"\u732b\u8138\u53d8\u6362",level:3},{value:"\u65e0\u6587\u4ef6\u5934IHDR\u4f46IDAT\u6b63\u786e\u53ef\u5f97\u5bbd\u9ad8\u8fd8\u539f",id:"\u65e0\u6587\u4ef6\u5934ihdr\u4f46idat\u6b63\u786e\u53ef\u5f97\u5bbd\u9ad8\u8fd8\u539f",level:3}];function p(r){const n={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...r.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"\u5e38\u7528\u811a\u672c",children:"\u5e38\u7528\u811a\u672c"}),"\n",(0,i.jsx)(n.p,{children:"\u90e8\u5206\u811a\u672c\u6765\u6e90\u4e8e\u7f51\u7edc\uff0c\u9700\u8981\u7684\u81ea\u53d6\uff0c\u4e0d\u9700\u8981\u7684\u4e0d\u53d6"}),"\n",(0,i.jsx)(n.h3,{id:"\u7206\u7834\u591a\u4e2a\u538b\u7f29\u5305crc",children:"\u7206\u7834\u591a\u4e2a\u538b\u7f29\u5305CRC"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#\u7206\u7834\u591a\u4e2a\u538b\u7f29\u5305\u7684crc\r\n#\u957f\u5ea6\u4e3a4\u5b57\u8282\r\nimport zipfile\r\nimport string\r\nimport binascii\r\npath = 'D:\\\\IDM_download\\\\file_17\\\\out'#\u8f93\u5165\u6587\u4ef6\u5939\u76ee\u5f55\r\n\r\ncrcs = [''] * 68#\u538b\u7f29\u5305\u603b\u4e2a\u6570\r\ntxts = [''] * 68#\u540c\u4e0a\r\n\r\nfor i in range(68):\r\n    file = path + str(i) + '.zip'\r\n    f = zipfile.ZipFile(file, 'r')\r\n    crcs[i] = f.getinfo('data.txt').CRC\r\n\r\ndic = string.printable[:-6]\r\nnum = 0\r\nfor i in dic:\r\n    for j in dic:\r\n        for k in dic:\r\n            for l in dic:\r\n                s = i + j + k + l\r\n                c = binascii.crc32(s.encode('utf-8'))\r\n                for n in range(68):\r\n                    if c == crcs[n]:\r\n                        txts[n] = s\r\n                        print('No.%d is %s' %(n, s))\r\n                        num += 1\r\n                if num == 68:\r\n                    print(txts)\r\n                    print(''.join(txts))\r\n                    break\r\n            else:\r\n                continue\r\n            break\r\n        else:\r\n            continue\r\n        break\r\n    else:\r\n        continue\r\n    break\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u81ea\u52a8\u8bfb\u53d6crc\u7206\u7834\u56fe\u7247\u9ad8\u5bbd",children:"\u81ea\u52a8\u8bfb\u53d6CRC\u7206\u7834\u56fe\u7247\u9ad8\u5bbd"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import zlib\r\nimport struct\r\nimport  binascii\r\n\r\n\r\nfile = 'out.png'\r\nfr = open(file,'rb').read()\r\ndata = bytearray(fr[12:29])\r\n\r\n#crc32key = eval(str(fr[29:33]).replace('\\\\x','').replace(\"b'\",'0x').replace(\"'\",'')) \r\ncrc32key = struct.unpack('>I',fr[29:33])[0]&0xffffffff \r\nprint(crc32key)\r\n#data = bytearray(b'\\x49\\x48\\x44\\x52\\x00\\x00\\x01\\xF4\\x00\\x00\\x01\\xF1\\x08\\x06\\x00\\x00\\x00') \r\nn = 4096\r\nfor w in range(n): \r\n    width = bytearray(struct.pack('>i', w))\r\n    for h in range(n): \r\n        height = bytearray(struct.pack('>i', h)) \r\n        for x in range(4): \r\n            data[x+4] = width[x] \r\n            data[x+8] = height[x] \r\n            #print(data) \r\n        crc32result = zlib.crc32(data) \r\n        if crc32result == crc32key:\r\n            print(crc32key) \r\n            print(width,height) \r\n            print(data) \r\n            newpic = bytearray(fr) \r\n            for x in range(4): \r\n                newpic[x+16] = width[x]\r\n                newpic[x+20] = height[x] \r\n            fw = open(file+'.png','wb') \r\n            fw.write(newpic) \r\n            fw.close \n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u538b\u7f29\u5305\u540d\u5b57\u89e3\u538b\u5bc6\u7801\u4e3a\u6700\u5916\u5c42\u538b\u7f29\u5305",children:"\u538b\u7f29\u5305\u540d\u5b57\u89e3\u538b\u5bc6\u7801\u4e3a\u6700\u5916\u5c42\u538b\u7f29\u5305"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import zipfile\r\nname = '0573'\r\nwhile True:\r\n    fz = zipfile.ZipFile(name + '.zip', 'r')\r\n    fz.extractall(pwd=bytes(name, 'utf-8'))\r\n    name = fz.filelist[0].filename[0:4]\r\n    fz.close()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u8bfb\u53d6\u538b\u7f29\u5305\u540d\u5b57\u81ea\u52a8\u89e3\u538b",children:"\u8bfb\u53d6\u538b\u7f29\u5305\u540d\u5b57\u81ea\u52a8\u89e3\u538b"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import zipfile\r\nimport re\r\nzipname = "E:\\\\\u7f51\u7ad9\u642d\u5efa\\\\\u8d44\u6e90\u5e93\\\\"+"1.zip"\r\nwhile True:\r\n    if zipname != "E:\\\\\u7f51\u7ad9\u642d\u5efa\\\\\u8d44\u6e90\u5e93\\\\73168.zip":\r\n        ts1 = zipfile.ZipFile(zipname)\r\n        #print ts1.namelist()[0]\r\n        res = re.search(\'[0-9]*\',ts1.namelist()[0])\r\n        print(res.group())\r\n        passwd = res.group()\r\n        ts1.extractall("E:\\\\\u7f51\u7ad9\u642d\u5efa\\\\\u8d44\u6e90\u5e93",pwd=passwd.encode(\'ascii\'))\r\n        zipname = "E:\\\\\u7f51\u7ad9\u642d\u5efa\\\\\u8d44\u6e90\u5e93\\\\"+ts1.namelist()[0]\r\n    else:\r\n        print("find")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"adam7\u5c0f\u56fe\u5408\u6210\u5927\u56fe",children:"Adam7\u5c0f\u56fe\u5408\u6210\u5927\u56fe"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from PIL import Image\r\nfrom tqdm import tqdm\r\nlist = [(0,0,8,8),(4,0,8,8),(0,4,4,8),(2,0,4,4),(0,2,2,4),(1,0,2,2),(0,1,1,2)] #(\u8d77\u59cb\u6a2a\u5750\u6807,\u8d77\u59cb\u7eb5\u5750\u6807,\u6a2a\u5411\u95f4\u9694,\u7eb5\u5411\u95f4\u9694)\r\npath = './small/'\r\nw,h = Image.open(f'{path}flags_6.png').size\r\nf = open(f'{path}flags_6.png','rb').read()\r\ntype = 0\r\nind = f.find(b'IHDR')\r\nprint(f[ind+13])\r\nif(f[ind+13] == 0):\r\n    type = 'L'\r\nelif(f[ind+13] == 2):\r\n    type = 'RGB'\r\nelif(f[ind+13] == 6):\r\n    type = 'RGBA'\r\nelse:\r\n    print('\u6682\u4e0d\u652f\u6301\u5176\u4ed6\u7c7b\u578b')\r\n    exit(0)\r\npic = Image.new(type,(w,h*2)) #\u6b64\u5904\u5224\u65ad\u9ad8\u5ea6\u672a\u7ecf\u8fc7\u4e25\u683c\u8ba1\u7b97\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053\u662fh*2+1\u8fd8\u662fh*2\uff0c\u4f46\u51fa\u9898\u4eba\u81ea\u5df1\u77e5\u9053\u5927\u5c0f\u56e0\u6b64\u8fd9\u91cc\u5c31\u4e0d\u505a\u989d\u5916\u7684\u5224\u65ad\r\n\r\nfor i in tqdm(range(7)):\r\n    img = Image.open(f'{path}flags_{str(i)}.png')\r\n    w_tmp,h_tmp = img.size\r\n    for j in range(h_tmp):\r\n        for k in range(w_tmp):\r\n            pic.putpixel((list[i][0]+k*list[i][2],list[i][1]+j*list[i][3]),img.getpixel((k,j)))\r\npic.save('out.png')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"python2-base64\u9690\u5199\u89e3\u5bc6",children:"python2-base64\u9690\u5199\u89e3\u5bc6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\nwith open('flag.txt', 'rb') as f:\r\n    bin_str = ''\r\n    for line in f.readlines():\r\n        stegb64 = ''.join(line.split())\r\n        rowb64 = ''.join(stegb64.decode('base64').encode('base64').split())\r\n\r\n        offset = abs(b64chars.index(stegb64.replace('=', '')[-1]) - b64chars.index(rowb64.replace('=', '')[-1]))\r\n        equalnum = stegb64.count('=')\r\n\r\n        if equalnum:\r\n            bin_str += bin(offset)[2:].zfill(equalnum * 2)\r\n\r\n        print ''.join([chr(int(bin_str[i:i + 8], 2)) for i in xrange(0, len(bin_str), 8)])  \n"})}),"\n",(0,i.jsx)(n.h3,{id:"bmp\u7b2c1\u6b65-\u7206\u7834\u5bbd\u5ea6",children:"BMP\u7b2c1\u6b65-\u7206\u7834\u5bbd\u5ea6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import zlib\r\nimport struct\r\nimport binascii\r\nimport os\r\n\r\n\r\nfile = '11.bmp'\r\nfr = open(file,'rb').read()\r\nheaddata = bytearray(fr[0:18])\r\nwidthdata = bytearray(fr[18:22])\r\nheightdata = bytearray(fr[22:26])\r\nremaindata = bytearray(fr[26::])\r\n\r\n'''\r\nprint (headdata)\r\nprint('========================================================')\r\nprint (heightdata)\r\nprint('========================================================')\r\nprint (widthdata)\r\nprint('========================================================')\r\nprint (remaindata)\r\n'''\r\n\r\nn = 1000\r\n\r\nh = 300\r\n\r\npath=os.getcwd()\r\ntmppath=path+'\\\\tmppic'\r\nprint(tmppath)\r\n\r\nif os.path.exists(tmppath):\r\n\tos.chdir(tmppath)\r\nelse:\r\n\tos.mkdir(tmppath)\r\n\tos.chdir(tmppath)\r\n\r\nheightdata=h.to_bytes(4, 'little')\r\n\r\n\r\nfor w in range(1,n): \r\n\twidthdata=w.to_bytes(4, 'little')\r\n\r\n#\tprint (widthdata)\r\n\r\n\tnewfile=headdata+widthdata+heightdata+remaindata\r\n\tfw = open(str(w)+'.bmp','wb') \r\n\tfw.write(newfile) \r\n\tfw.close \r\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bmp\u7b2c\u4e8c\u6b65\u7206\u7834\u957f\u5ea6",children:"BMP\u7b2c\u4e8c\u6b65\u7206\u7834\u957f\u5ea6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import zlib\r\nimport struct\r\nimport binascii\r\nimport os\r\n\r\n\r\nfile = '11.bmp'\r\nfr = open(file,'rb').read()\r\nheaddata = bytearray(fr[0:18])\r\nwidthdata = bytearray(fr[18:22])\r\nheightdata = bytearray(fr[22:26])\r\nremaindata = bytearray(fr[26::])\r\n\r\n'''\r\nprint (headdata)\r\nprint('========================================================')\r\nprint (heightdata)\r\nprint('========================================================')\r\nprint (widthdata)\r\nprint('========================================================')\r\nprint (remaindata)\r\n'''\r\n\r\nn = 1000\r\n\r\nw = 536\r\n\r\npath=os.getcwd()\r\ntmppath=path+'\\\\tmppic'\r\nprint(tmppath)\r\n\r\nif os.path.exists(tmppath):\r\n\tos.chdir(tmppath)\r\nelse:\r\n\tos.mkdir(tmppath)\r\n\tos.chdir(tmppath)\r\n\r\nwidthdata=w.to_bytes(4, 'little')\r\n\r\n\r\nfor h in range(1,n): \r\n\theightdata=h.to_bytes(4, 'little')\r\n\r\n#\tprint (widthdata)\r\n\r\n\tnewfile=headdata+widthdata+heightdata+remaindata\r\n\tfw = open(str(h)+'.bmp','wb') \r\n\tfw.write(newfile) \r\n\tfw.close \r\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u7206\u7834emoji-aes",children:"\u7206\u7834emoji-aes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# -*- codeing = utf-8 -*-\r\n# @Time : 2021/12/28 17:53\r\n# @Author : Mumuzi\r\n# @File : burst_emoji_aes.py\r\n# @Software : PyCharm\r\n\r\n\'\'\'\r\n\u5176\u5b9e\u548cemoji-aes\u6ca1\u5565\u5173\u7cfb\uff0c\u5c31\u66ff\u6362\u6210base64\u4e4b\u540e\u518d\u7206\u7834\u800c\u5df2...\r\nemmmm\u5f53\u7136\u76f4\u63a5\u53bb\u8c03js\u4e5f\u884c\uff0c\u53ea\u662f\u6211\u4e0d\u4f1a\r\n\u811a\u672c\u4e2d\u91cd\u8981\u90e8\u5206\u4e5f\u662fgithub\u6709\u7684\uff0c\u6240\u4ee5\u8fd9\u9898\u5f88\u7b80\u5355\r\n\u6252\u6e90\u7801\u7684\u65f6\u5019\u6ce8\u610f\u5230\u4ed6\u662f\u5148\u5c0f\u5199\u518d\u5927\u5199\uff0c\u6b63\u5e38base64\u8868\u662f\u5148\u5927\u5199\u518d\u5c0f\u5199\u7684\r\n\'\'\'\r\n\r\nfrom tqdm import tqdm\r\nfrom Crypto.Cipher import AES\r\nimport base64\r\nfrom hashlib import md5\r\nimport string\r\nimport itertools\r\n\r\nemojisInit = ["\ud83c\udf4e", "\ud83c\udf4c", "\ud83c\udfce", "\ud83d\udeaa", "\ud83d\udc41", "\ud83d\udc63", "\ud83d\ude00", "\ud83d\udd90", "\u2139", "\ud83d\ude02", "\ud83e\udd4b", "\u2709", "\ud83d\udeb9", "\ud83c\udf09", "\ud83d\udc4c", "\ud83c\udf4d", "\ud83d\udc51", "\ud83d\udc49", "\ud83c\udfa4", "\ud83d\udeb0", "\u2602", "\ud83d\udc0d", "\ud83d\udca7", "\u2716", "\u2600", "\ud83e\udd93", "\ud83c\udff9", "\ud83c\udf88", "\ud83d\ude0e", "\ud83c\udf85", "\ud83d\udc18", "\ud83c\udf3f", "\ud83c\udf0f", "\ud83c\udf2a", "\u2603", "\ud83c\udf75", "\ud83c\udf74", "\ud83d\udea8", "\ud83d\udcee", "\ud83d\udd79", "\ud83d\udcc2", "\ud83d\udee9", "\u2328", "\ud83d\udd04", "\ud83d\udd2c", "\ud83d\udc05", "\ud83d\ude43", "\ud83d\udc0e", "\ud83c\udf0a", "\ud83d\udeab", "\u2753", "\u23e9", "\ud83d\ude01", "\ud83d\ude06", "\ud83d\udcb5", "\ud83e\udd23", "\u263a", "\ud83d\ude0a", "\ud83d\ude07", "\ud83d\ude21", "\ud83c\udf83", "\ud83d\ude0d", "\u2705", "\ud83d\udd2a", "\ud83d\uddd2"]\r\ntable = string.ascii_lowercase+string.ascii_uppercase+string.digits+\'+/=\'\r\ntable = list(table)\r\n\r\ndef unpad(data):\r\n    return data[:-(data[-1] if type(data[-1]) == int else ord(data[-1]))]\r\n\r\ndef bytes_to_key(data, salt, output=48):\r\n    # extended from https://gist.github.com/gsakkis/4546068\r\n    assert len(salt) == 8, len(salt)\r\n    data += salt\r\n    key = md5(data).digest()\r\n    final_key = key\r\n    while len(final_key) < output:\r\n        key = md5(key + data).digest()\r\n        final_key += key\r\n    return final_key[:output]\r\n\r\ndef decrypt(emo, passphrase):\r\n    #https://my.oschina.net/u/3021599/blog/3134709\r\n    bs64 = \'\'\r\n    for i in emo:\r\n        bs64 += table[emojisInit.index(i)]\r\n    encrypted = base64.b64decode(bs64)\r\n    assert encrypted[0:8] == b"Salted__"\r\n    salt = encrypted[8:16]\r\n    key_iv = bytes_to_key(passphrase, salt, 32+16)\r\n    key = key_iv[:32]\r\n    iv = key_iv[32:]\r\n    aes = AES.new(key, AES.MODE_CBC, iv)\r\n    return unpad(aes.decrypt(encrypted[16:]))\r\n\r\nif __name__ == \'__main__\':\r\n    TABLE = string.ascii_lowercase+string.digits\r\n    emoji_enc = input(\'input your emoji_enc:\')\r\n    for i in tqdm(itertools.product(\'\'.join(i for i in TABLE), repeat= 6)):\r\n        passphrase = str(\'\'.join(i)).encode(\'utf-8\')\r\n        result = decrypt(emoji_enc,passphrase)\r\n        if(b\'flag\' in result):\r\n            print(\'text is :\',result,\'and key is :\',passphrase)\r\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"cloacked-pixel\u7206\u7834",children:"cloacked-pixel\u7206\u7834"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from lsb import extract\r\nimport os\r\nfrom tqdm import tqdm\r\n'''\r\nuse py2\r\n'''\r\n\r\nhidden_img = 'ATM.png'#image file path\r\ncodebook = 'passwd.txt'#password path\r\npasswd = open(codebook,'r').read().splitlines()\r\n\r\nos.mkdir(hidden_img[:-4])\r\n\r\nfor i in tqdm(range(len(passwd))):\r\n    out_path = hidden_img[:-4]+'/'+passwd[i]+'.txt'\r\n    extract(hidden_img, out_path, passwd[i])\n"})}),"\n",(0,i.jsx)(n.h3,{id:"crccrack",children:"CRCcrack"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python3\r\nimport sys\r\nimport os\r\nimport string\r\nimport collections\r\n\r\nimport argparse\r\nparser = argparse.ArgumentParser()\r\nparser.add_argument('file', nargs='*')\r\nparser.add_argument('--hex', action='append')\r\nparser.add_argument('--dec', action='append')\r\nparser.add_argument('--limit', type=int)\r\nparser.add_argument('--compiler', default='g++')\r\nparser.add_argument('--alphabet', type=os.fsencode, default=string.printable.encode())\r\nargs = parser.parse_args()\r\n\r\ntargets = collections.OrderedDict()\r\nlimit = 0\r\ncrcs = []\r\n\r\nif args.limit:\r\n    limit = max(limit, args.limit)\r\nif args.hex or args.dec:\r\n    if not args.limit:\r\n        parser.error('Limit of length not specified')\r\n\r\nif args.hex:\r\n    for s in args.hex:\r\n        crc = int(s, 16)\r\n        targets[s] = crc\r\n        for l in range(args.limit + 1):\r\n            crcs += [( crc, l )]\r\nif args.dec:\r\n    for s in args.dec:\r\n        crc = int(s)\r\n        targets[s] = crc\r\n        for l in range(args.limit + 1):\r\n            crcs += [( crc, l )]\r\n\r\nif args.file:\r\n    print('reading zip files...', file=sys.stderr)\r\n    import zipfile\r\n    for zipname in args.file:\r\n        fh = zipfile.ZipFile(zipname)\r\n        for info in fh.infolist():\r\n            targets['%s / %s' % ( zipname, info.filename )] = ( info.CRC, info.file_size )\r\n            crcs += [( info.CRC, info.file_size )]\r\n            limit = max(limit, info.file_size)\r\n            print('file found: %s / %s: crc = 0x%08x, size = %d' % (zipname, info.filename, info.CRC, info.file_size), file=sys.stderr)\r\n\r\nif not crcs:\r\n    parser.error('No CRCs given')\r\n\r\n# compiling c++ in python script is the easy way to have the both a good interface and better speed\r\ncode = ''\r\ncode += r'''\r\n#include <cstdio>\r\n#include <vector>\r\n#include <array>\r\n#include <string>\r\n#include <set>\r\n#include <cstdint>\r\n#include <cctype>\r\n#define repeat(i,n) for (int i = 0; (i) < (n); ++(i))\r\nusing namespace std;\r\nuint32_t crc_table[256];\r\nvoid make_crc_table() {\r\n    repeat (i, 256) {\r\n        uint32_t c = i;\r\n        repeat (j, 8) {\r\n            c = (c & 1) ? (0xedb88320 ^ (c >> 1)) : (c >> 1);\r\n        }\r\n        crc_table[i] = c;\r\n    }\r\n}\r\nconst uint32_t initial_crc32 = 0xffffffff;\r\nuint32_t next_crc32(uint32_t c, char b) {\r\n    return crc_table[(c ^ b) & 0xff] ^ (c >> 8);\r\n}\r\nconst uint32_t mask_crc32 = 0xffffffff;\r\nconst char alphabet[] = { ''' + ', '.join(map(str, args.alphabet)) + r''' };\r\nconst int limit = ''' + str(limit) + r''';\r\narray<set<uint32_t>, limit+1> crcs;\r\nstring stk;\r\nvoid dfs(uint32_t crc) {\r\n    if (crcs[stk.length()].count(crc ^ mask_crc32)) {\r\n        fprintf(stderr, \"crc found: 0x%08x: \\\"\", crc ^ mask_crc32);\r\n        for (char c : stk) fprintf(stderr, isprint(c) && (c != '\\\\') ? \"%c\" : \"\\\\x%02x\", c);\r\n        fprintf(stderr, \"\\\"\\n\");\r\n        printf(\"%08x \", crc ^ mask_crc32);\r\n        for (char c : stk) printf(\" %02x\", c);\r\n        printf(\"\\n\");\r\n    }\r\n    if (stk.length() < limit) {\r\n        for (char c : alphabet) {\r\n            stk.push_back(c);\r\n            dfs(next_crc32(crc, c));\r\n            stk.pop_back();\r\n        }\r\n    }\r\n}\r\nint main() {\r\n'''\r\nfor crc, size in crcs:\r\n    code += '    crcs[' + str(size) + '].insert(' + hex(crc) + ');\\n'\r\ncode += r'''\r\n    make_crc_table();\r\n    dfs(initial_crc32);\r\n    return 0;\r\n}\r\n'''\r\n\r\nimport tempfile\r\nimport subprocess\r\nwith tempfile.TemporaryDirectory() as tmpdir:\r\n    cppname = os.path.join(tmpdir, 'a.cpp')\r\n    with open(cppname, 'w') as fh:\r\n        fh.write(code)\r\n    binname = os.path.join(tmpdir, 'a.out')\r\n    print('compiling...', file=sys.stderr)\r\n    p = subprocess.check_call([args.compiler, '-std=c++11', '-O3', '-o', binname, cppname])\r\n    print('searching...', file=sys.stderr)\r\n    p = subprocess.Popen([binname], stdout=subprocess.PIPE)\r\n    output, _ = p.communicate()\r\n\r\nprint('done', file=sys.stderr)\r\nprint(file=sys.stderr)\r\nresult = collections.defaultdict(list)\r\nfor line in output.decode().strip().split('\\n'):\r\n    crc, *val = map(lambda x: int(x, 16), line.split())\r\n    result[( crc, len(val) )] += [ bytes(val) ]\r\nfor key, crc in targets.items():\r\n    for s in result[crc]:\r\n        print('%s : %s' % (key, repr(s)[1:]))\n"})}),"\n",(0,i.jsx)(n.h3,{id:"deepsound2john",children:"deepsound2john"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python3\r\n'''\r\ndeepsound2john extracts password hashes from audio files containing encrypted\r\ndata steganographically embedded by DeepSound (http://jpinsoft.net/deepsound/).\r\nThis method is known to work with files created by DeepSound 2.0.\r\nInput files should be in .wav format. Hashes can be recovered from audio files\r\neven after conversion from other formats, e.g.,\r\n    ffmpeg -i input output.wav\r\nUsage:\r\n    python3 deepsound2john.py carrier.wav > hashes.txt\r\n    john hashes.txt\r\nThis software is copyright (c) 2018 Ryan Govostes <rgovostes@gmail.com>, and\r\nit is hereby released to the general public under the following terms:\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted.\r\n'''\r\n\r\nimport logging\r\nimport os\r\nimport sys\r\nimport textwrap\r\n\r\n\r\ndef decode_data_low(buf):\r\n  return buf[::2]\r\n\r\ndef decode_data_normal(buf):\r\n  out = bytearray()\r\n  for i in range(0, len(buf), 4):\r\n    out.append((buf[i] & 15) << 4 | (buf[i + 2] & 15))\r\n  return out\r\n\r\ndef decode_data_high(buf):\r\n  out = bytearray()\r\n  for i in range(0, len(buf), 8):\r\n    out.append((buf[i] & 3) << 6     | (buf[i + 2] & 3) << 4 \\\r\n             | (buf[i + 4] & 3) << 2 | (buf[i + 6] & 3))\r\n  return out\r\n\r\n\r\ndef is_magic(buf):\r\n  # This is a more efficient way of testing for the `DSCF` magic header without\r\n  # decoding the whole buffer\r\n  return (buf[0] & 15)  == (68 >> 4) and (buf[2]  & 15) == (68 & 15) \\\r\n     and (buf[4] & 15)  == (83 >> 4) and (buf[6]  & 15) == (83 & 15) \\\r\n     and (buf[8] & 15)  == (67 >> 4) and (buf[10] & 15) == (67 & 15) \\\r\n     and (buf[12] & 15) == (70 >> 4) and (buf[14] & 15) == (70 & 15)\r\n\r\n\r\ndef is_wave(buf):\r\n  return buf[0:4] == b'RIFF' and buf[8:12] == b'WAVE'\r\n\r\n\r\ndef process_deepsound_file(f):\r\n  bname = os.path.basename(f.name)\r\n  logger = logging.getLogger(bname)\r\n\r\n  # Check if it's a .wav file\r\n  buf = f.read(12)\r\n  if not is_wave(buf):\r\n    global convert_warn\r\n    logger.error('file not in .wav format')\r\n    convert_warn = True\r\n    return\r\n  f.seek(0, os.SEEK_SET)\r\n\r\n  # Scan for the marker...\r\n  hdrsz = 104\r\n  hdr = None\r\n\r\n  while True:\r\n    off = f.tell()\r\n    buf = f.read(hdrsz)\r\n    if len(buf) < hdrsz: break\r\n\r\n    if is_magic(buf):\r\n          hdr = decode_data_normal(buf)\r\n          logger.info('found DeepSound header at offset %i', off)\r\n          break\r\n\r\n    f.seek(-hdrsz + 1, os.SEEK_CUR)\r\n\r\n  if hdr is None:\r\n    logger.warn('does not appear to be a DeepSound file')\r\n    return\r\n\r\n  # Check some header fields\r\n  mode = hdr[4]\r\n  encrypted = hdr[5]\r\n\r\n  modes = {2: 'low', 4: 'normal', 8: 'high'}\r\n  if mode in modes:\r\n    logger.info('data is encoded in %s-quality mode', modes[mode])\r\n  else:\r\n    logger.error('unexpected data encoding mode %i', modes[mode])\r\n    return\r\n\r\n  if encrypted == 0:\r\n    logger.warn('file is not encrypted')\r\n    return\r\n  elif encrypted != 1:\r\n    logger.error('unexpected encryption flag %i', encrypted)\r\n    return\r\n\r\n  sha1 = hdr[6:6+20]\r\n  print('%s:$dynamic_1529$%s' % (bname, sha1.hex()))\r\n\r\n\r\nif __name__ == '__main__':\r\n  import argparse\r\n\r\n  parser = argparse.ArgumentParser()\r\n  parser.add_argument('--verbose', '-v', action='store_true')\r\n  parser.add_argument('files', nargs='+', metavar='file',\r\n    type=argparse.FileType('rb', bufsize=4096))\r\n  args = parser.parse_args()\r\n\r\n  if args.verbose:\r\n    logging.basicConfig(level=logging.INFO)\r\n  else:\r\n    logging.basicConfig(level=logging.WARN)\r\n\r\n  convert_warn = False\r\n\r\n  for f in args.files:\r\n    process_deepsound_file(f)\r\n\r\n  if convert_warn:\r\n    print(textwrap.dedent('''\r\n    ---------------------------------------------------------------\r\n    Some files were not in .wav format. Try converting them to .wav\r\n    and try again. You can use: ffmpeg -i input output.wav\r\n    ---------------------------------------------------------------\r\n    '''.rstrip()), file=sys.stderr)\r\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mtp\u4e00\u6b21\u591a\u5bc6",children:"MTP\u4e00\u6b21\u591a\u5bc6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"#\u5bc6\u6587\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u5e94\u8be5\u5148\u5c06\u5176\u5904\u7406\r\nciphertexts = [\r\n    \"315c4eeaa8b5f8aaf9174145bf43e1784b8fa00dc71d885a804e5ee9fa40b16349c146fb778cdf2d3aff021dfff5b403b510d0d0455468aeb98622b137dae857553ccd8883a7bc37520e06e515d22c954eba5025b8cc57ee59418ce7dc6bc41556bdb36bbca3e8774301fbcaa3b83b220809560987815f65286764703de0f3d524400a19b159610b11ef3e\",\r\n    \"234c02ecbbfbafa3ed18510abd11fa724fcda2018a1a8342cf064bbde548b12b07df44ba7191d9606ef4081ffde5ad46a5069d9f7f543bedb9c861bf29c7e205132eda9382b0bc2c5c4b45f919cf3a9f1cb74151f6d551f4480c82b2cb24cc5b028aa76eb7b4ab24171ab3cdadb8356f\",\r\n    \"32510ba9a7b2bba9b8005d43a304b5714cc0bb0c8a34884dd91304b8ad40b62b07df44ba6e9d8a2368e51d04e0e7b207b70b9b8261112bacb6c866a232dfe257527dc29398f5f3251a0d47e503c66e935de81230b59b7afb5f41afa8d661cb\",\r\n    \"32510ba9aab2a8a4fd06414fb517b5605cc0aa0dc91a8908c2064ba8ad5ea06a029056f47a8ad3306ef5021eafe1ac01a81197847a5c68a1b78769a37bc8f4575432c198ccb4ef63590256e305cd3a9544ee4160ead45aef520489e7da7d835402bca670bda8eb775200b8dabbba246b130f040d8ec6447e2c767f3d30ed81ea2e4c1404e1315a1010e7229be6636aaa\",\r\n    \"3f561ba9adb4b6ebec54424ba317b564418fac0dd35f8c08d31a1fe9e24fe56808c213f17c81d9607cee021dafe1e001b21ade877a5e68bea88d61b93ac5ee0d562e8e9582f5ef375f0a4ae20ed86e935de81230b59b73fb4302cd95d770c65b40aaa065f2a5e33a5a0bb5dcaba43722130f042f8ec85b7c2070\",\r\n    \"32510bfbacfbb9befd54415da243e1695ecabd58c519cd4bd2061bbde24eb76a19d84aba34d8de287be84d07e7e9a30ee714979c7e1123a8bd9822a33ecaf512472e8e8f8db3f9635c1949e640c621854eba0d79eccf52ff111284b4cc61d11902aebc66f2b2e436434eacc0aba938220b084800c2ca4e693522643573b2c4ce35050b0cf774201f0fe52ac9f26d71b6cf61a711cc229f77ace7aa88a2f19983122b11be87a59c355d25f8e4\",\r\n    \"32510bfbacfbb9befd54415da243e1695ecabd58c519cd4bd90f1fa6ea5ba47b01c909ba764896cf606ef40c04afe1ac0aa81dd066592ded9f8774b529c7ea125d298e8883f5e9305f4b44f915cb2bd05af51373fd9b4af511039fa2d96f83414aaaf261bda2e97b170fb5cce2a53e675c154c0d9681596934777e2275b381ce2e40582afe67650b13e72287ff2270abcf73bb028932836fbdecfecee0a3b894473c1bbeb6b4913a536ce4f9b13f1efff71ea313c8661dd9a4ce\",\r\n    \"315c4eeaa8b5f8bffd11155ea506b56041c6a00c8a08854dd21a4bbde54ce56801d943ba708b8a3574f40c00fff9e00fa1439fd0654327a3bfc860b92f89ee04132ecb9298f5fd2d5e4b45e40ecc3b9d59e9417df7c95bba410e9aa2ca24c5474da2f276baa3ac325918b2daada43d6712150441c2e04f6565517f317da9d3\",\r\n    \"271946f9bbb2aeadec111841a81abc300ecaa01bd8069d5cc91005e9fe4aad6e04d513e96d99de2569bc5e50eeeca709b50a8a987f4264edb6896fb537d0a716132ddc938fb0f836480e06ed0fcd6e9759f40462f9cf57f4564186a2c1778f1543efa270bda5e933421cbe88a4a52222190f471e9bd15f652b653b7071aec59a2705081ffe72651d08f822c9ed6d76e48b63ab15d0208573a7eef027\",\r\n    \"466d06ece998b7a2fb1d464fed2ced7641ddaa3cc31c9941cf110abbf409ed39598005b3399ccfafb61d0315fca0a314be138a9f32503bedac8067f03adbf3575c3b8edc9ba7f537530541ab0f9f3cd04ff50d66f1d559ba520e89a2cb2a83\",\r\n    \"32510ba9babebbbefd001547a810e67149caee11d945cd7fc81a05e9f85aac650e9052ba6a8cd8257bf14d13e6f0a803b54fde9e77472dbff89d71b57bddef121336cb85ccb8f3315f4b52e301d16e9f52f904\"\r\n]\r\n\r\nNUM_CIPHER = len(ciphertexts)#NUM_CIPHER=11\r\nTHRESHOLD_VALUE = 7#\u5982\u679c\u4e24\u4e24\u5f02\u6216\u7684\u7ed3\u679c\u4e3a\u5b57\u6bcd\u6570\u5927\u4e8e7\u6b21\uff0c\u5c31\u8ba4\u4e3a\u8be5\u5b57\u7b26\u4e3a\u7a7a\u683c,\u8be5\u503c\u66f4\u6539\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\r\n\r\ndef strxor(a, b):\r\n    #\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5f02\u6216\r\n    if len(a) > len(b):\r\n        # \u5f62\u6210\u4e8c\u5143\u7ec4\uff0c\u5f02\u6216,\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\r\n        return \"\".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a[:len(b)], b)])\r\n    else:\r\n        return \"\".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b[:len(a)])])\r\n\r\ndef letter_position(s):\r\n    #\u8fd4\u56de\u7ed9\u5b9a\u5b57\u7b26\u4e32\u4e2d\u7ed9\u5b9a\u5b57\u6bcd\u7684\u4f4d\u7f6e\r\n    position = []\r\n    for idx in range(len(s)):\r\n        #\u8003\u8651\u5230\u7a7a\u683c\u5f02\u6216\u4e3a0\u7684\u60c5\u51b5\u53ef\u80fd\u8f83\u591a\r\n        if (s[idx] >= 'A' and s[idx] <= 'Z') or (s[idx] >= 'a' and s[idx] <= 'z') or s[idx] == chr(0):\r\n            position.append(idx)\r\n    return position\r\n\r\ndef find_space(cipher):\r\n    #\u5bfb\u627e\u7a7a\u5b57\u7b26\r\n    space_position = {}\r\n    space_possible = {}\r\n    #\u53cc\u91cd\u5faa\u73af\uff0c\u6bcf\u4e00\u6761\u5bc6\u6587\u5747\u4e0e\u5176\u4ed6\u5bc6\u6587\u5f02\u6216\r\n    for cipher_idx_1 in range(NUM_CIPHER):\r\n        space_xor = []#\u7528\u4e8e\u4fdd\u5b58\u53ef\u80fd\u7a7a\u683c\u7b26\u5bf9\u5e94\u7684\u4f4d\u7f6e\r\n        c = ''.join([chr(int(d, 16)) for d in [cipher[cipher_idx_1][i:i + 2] for i in range(0, len(cipher[cipher_idx_1]), 2)]])\r\n        for cipher_idx_2 in range(NUM_CIPHER):\r\n            #\u5c06\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u5904\u7406\u6210\u5bf9\u5e94ascii\u5b57\u7b26\uff08\u6bcf\u4e24\u4e2a\u5b57\u7b26\u4ee3\u8868\u4e00\u4e2aascii\u7b26\u53f7\uff09\r\n            e = ''.join([chr(int(d, 16)) for d in [cipher[cipher_idx_2][i:i+2] for i in range(0, len(cipher[cipher_idx_2]), 2)]])\r\n            plain_xor = strxor(c, e)\r\n            if cipher_idx_2 != cipher_idx_1:\r\n                # \u8bb0\u5f55\u660e\u6587\u4e2d\u53ef\u80fd\u7a7a\u683c\u7b26\u7684\u4f4d\u7f6e\r\n                space_xor.append(letter_position(plain_xor))\r\n        space_possible[cipher_idx_1] = space_xor  #\u5f62\u6210\u4e09\u7ef4\u5217\u8868,\u65b0\u5217\u8868\u4e3a11*10*n\r\n\r\n    #\u8fdb\u4e00\u6b65\u5224\u65ad\u5df2\u8bb0\u5f55\u7684\u4f4d\u7f6e\u662f\u5426\u4e3a\u7a7a\u5b57\u7b26\uff0c\u5176\u51c6\u786e\u6027\u53d7\u5230\u6587\u672c\u6570\u91cf\u7684\u5f71\u54cd\r\n    for cipher_idx_1 in range(NUM_CIPHER):\r\n        spa = []\r\n        for position in range(400):\r\n            count = 0\r\n            for cipher_idx_2 in range(NUM_CIPHER - 1):\r\n                if position in space_possible[cipher_idx_1][cipher_idx_2]:\r\n                    count += 1\r\n            if count > THRESHOLD_VALUE:  # \u5982\u679c\u5f02\u6216\u540e\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\u5927\u4e8e7\u6b21\uff0c\u8ba4\u4e3a\u660e\u6587\u4e2d\u6b64\u5904\u4e3a\u7a7a\u683c\r\n                spa.append(position)\r\n        space_position[cipher_idx_1] = spa  #\u6784\u6210\u4e8c\u7ef4\u5217\u8868\uff0c11 * n\r\n    return space_position\r\n\r\n#\u8ba1\u7b97\u83b7\u5f97\u5bf9\u5e94\u5bc6\u94a5Key\r\ndef calculate_key(cipher):\r\n    key = [0] * 200  #\u5b58\u653ekey\r\n    space = find_space(cipher)\r\n    #print(space)\r\n    for cipher_idx_1 in range(NUM_CIPHER):\r\n        for position in range(len(space[cipher_idx_1])):\r\n            idx = space[cipher_idx_1][position] * 2 #\u5341\u516d\u8fdb\u5236\uff0c\u75282\u4f4d\u8868\u793a\r\n            a = cipher[cipher_idx_1][idx] + cipher[cipher_idx_1][idx + 1]\r\n            key[space[cipher_idx_1][position]] = int(a ,16) ^ ord(' ') # \u8ba1\u7b97\u5bc6\u94a5\uff0c\u83b7\u5f97\u7ed3\u679c\u5341\u8fdb\u5236(ascii\u7801\uff09\r\n\r\n    key_str = \"\"#\u7a7a\u4e32\u7528\u4e8e\u5b58\u653e\u5bc6\u94a5\r\n    for k in key:\r\n        key_str += chr(k)#\u8f6c\u5316\u4e3a\r\n    return key_str  #\u83b7\u5f97\u5bc6\u94a5\u4e32\r\n\r\nresult = \"\"\r\nkey = calculate_key(ciphertexts)\r\nkey_hex = ''.join([hex(ord(c)).replace('0x', '') for c in key])#\u5341\u516d\u8fdb\u5236key\r\nprint(\"key=\",key)\r\nprint(\"key_hex=\",key_hex)\r\n\r\n# f = ''.join([chr(int(d, 16)) for d in [ciphertexts[10][i:i+2] for i in range(0, len(ciphertexts[10]), 2)]])\r\n# for letter in strxor(f,key):\r\n#          if (letter>=' ' and letter<='~ '):#\u6253\u5370\u4ece32-126\u7684\u53ef\u89c1\u5b57\u7b26\r\n#              result+=letter\r\n#          else:\r\n#              result+='0'#\u4e0d\u53ef\u6253\u5370\u5b57\u7b26\u75280\u4ee3\u66ff\uff0c\u4ee5\u533a\u522b\u7a7a\u683c\u7b26\r\n# print(result)\r\n\r\n\r\n#\u6253\u5370\u6240\u6709\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\r\nfor j in range(11):\r\n    f = ''.join([chr(int(d, 16)) for d in [ciphertexts[j][i:i + 2] for i in range(0, len(ciphertexts[j]), 2)]])\r\n    for letter in strxor(f,key):\r\n         if (letter>=' ' and letter<='~ '):\r\n             result+=letter\r\n         else:\r\n             result+='0'\r\n    print(result)\r\n    result = '' #\u5c06result\u6e05\u7a7a\uff0c\u518d\u6b21\u4f7f\u7528\r\n\r\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rsa\u5e38\u89c1\u4e00\u628a\u68ad",children:"RSA\u5e38\u89c1\u4e00\u628a\u68ad"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# coding:utf-8\r\nimport gmpy2, libnum\r\nfrom Crypto.PublicKey import RSA\r\nfrom Crypto.Util.number import bytes_to_long\r\n\r\n\r\ndef egcd(a, b):\r\n    if a == 0:\r\n        return (b, 0, 1)\r\n    else:\r\n        g, y, x = egcd(b % a, a)\r\n    return (g, x - (b // a) * y, y)\r\n\r\n\r\ndef extended_gcd(a, b):\r\n    x, y = 0, 1\r\n    lastx, lasty = 1, 0\r\n    while b:\r\n        a, (q, b) = b, divmod(a, b)\r\n        x, lastx = lastx - q * x, x\r\n        y, lasty = lasty - q * y, y\r\n    return (lastx, lasty, a)\r\n\r\n\r\ndef CRT(items):  # \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\r\n    N = 1\r\n    for a, n in items:\r\n        N *= n\r\n    result = 0\r\n    for a, n in items:\r\n        m = N // n\r\n        r, s, d = extended_gcd(n, m)\r\n        if d != 1:\r\n            N = N // n\r\n            continue\r\n        result += a * s * m\r\n    return result % N, N\r\n\r\n\r\ndef p_q_e():\r\n    p = int(input("p="))\r\n    q = int(input("q="))\r\n    e = int(input("e="))\r\n    c = int(input("c="))\r\n    phi = (p - 1) * (q - 1)\r\n    n = p * q\r\n    d = gmpy2.invert(e, phi)\r\n    m = pow(c, d, n)\r\n    print("\u660e\u6587\uff1a", libnum.n2s(m))\r\n\r\n\r\ndef Common_Modulus():\r\n    n = int(input("n="))\r\n    e1 = int(input("e1="))\r\n    c1 = int(input("c1="))\r\n    e2 = int(input("e2="))\r\n    c2 = int(input("c2="))\r\n\r\n    s = egcd(e1, e2)\r\n    s1 = s[1]\r\n    s2 = s[2]\r\n    # \u6c42\u6a21\u53cd\u5143\u7d20\r\n    if s1 < 0:\r\n        s1 = - s1\r\n        c1 = gmpy2.invert(c1, n)\r\n    elif s2 < 0:\r\n        s2 = - s2\r\n        c2 = gmpy2.invert(c2, n)\r\n\r\n    m = pow(c1, s1, n) * pow(c2, s2, n) % n\r\n    print("\u660e\u6587\uff1a", libnum.n2s(m))\r\n\r\n\r\ndef Small_plaintext_e3():\r\n    e = int(input("e="))\r\n    n = int(input("n="))\r\n    c = int(input("c="))\r\n    for k in range(200000000):\r\n        if gmpy2.iroot(c + n * k, e)[1] == 1:\r\n            m = gmpy2.iroot(c + n * k, e)[0]\r\n            print("\u660e\u6587\uff1a", libnum.n2s(m))\r\n            break\r\n\r\n\r\ndef n_e_dp():\r\n    n = int(input("n="))\r\n    e = int(input("e="))\r\n    dp = int(input("dp="))\r\n    c = int(input("c="))\r\n    for i in range(1, 65538):\r\n        if (dp * e - 1) % i == 0:\r\n            if n % (((dp * e - 1) // i) + 1) == 0:\r\n                p = ((dp * e - 1) // i) + 1\r\n                q = n // p\r\n                phi = (p - 1) * (q - 1)\r\n                d = gmpy2.invert(e, phi) % phi\r\n                print(libnum.n2s(pow(c, d, n)))\r\n\r\n\r\ndef N2_equal_P():\r\n    n1 = int(input("n1="))\r\n    n2 = int(input("n2="))\r\n    e1 = int(input("e1="))\r\n    e2 = int(input("e2="))\r\n    c1 = int(input("c1="))\r\n    c2 = int(input("c2="))\r\n    p = gmpy2.gcd(n1, n2)\r\n    # print(p)\r\n    q1 = n1 // p\r\n    q2 = n2 // p\r\n    phi_1 = (p - 1) * (q1 - 1)\r\n    phi_2 = (p - 1) * (q2 - 1)\r\n    d1 = gmpy2.invert(e1, phi_1)\r\n    d2 = gmpy2.invert(e2, phi_2)\r\n    print("m1\uff1a", libnum.n2s(pow(c1, d1, n1)))\r\n    print("m2\uff1a", libnum.n2s(pow(c2, d2, n2)))\r\n\r\n\r\ndef Prime_3():\r\n    p = int(input("p="))\r\n    q = int(input("q="))\r\n    r = int(input("r="))\r\n    e = int(input("e="))\r\n    c = int(input("c="))\r\n    s = (p - 1) * (q - 1) * (r - 1)\r\n    d = (gmpy2.invert(e, s))\r\n    n = p * q * r\r\n    m = pow(c, d, n)\r\n    print("\u660e\u6587\uff1a", libnum.n2s(m))\r\n\r\n\r\ndef RSA_File():\r\n    public_name = input("\u8bf7\u8f93\u5165\u516c\u94a5\u6587\u4ef6\u540d(\u6ca1\u6709\u76f4\u63a5\u56de\u8f66)\uff1a")\r\n    flag_name = input("\u8bf7\u8f93\u5165\u52a0\u5bc6\u6587\u4ef6\u540d\uff1a")\r\n    private_name = input("\u8bf7\u8f93\u5165\u79c1\u94a5\u6587\u4ef6\u540d(\u6ca1\u6709\u76f4\u63a5\u56de\u8f66)\uff1a")\r\n    with open(flag_name, \'rb\') as f:\r\n        c = bytes_to_long(f.read())\r\n    if private_name == "":\r\n        pass\r\n    else:\r\n        with open(private_name, \'r\') as private:\r\n            Key = RSA.importKey(private.read())\r\n            n, e, d, p, q = Key.n, Key.e, Key.d, Key.p, Key.q\r\n            m = pow(c, d, n)\r\n            print("\u660e\u6587\uff1a", libnum.n2s(m))\r\n            return\r\n    with open(public_name, \'r\') as public:\r\n        key = RSA.importKey(public.read())\r\n        n, e = key.n, key.e\r\n\r\n    print("n=", n)\r\n    print("e=", e)\r\n    print("c=", c)\r\n\r\n\r\ndef next_prime():\r\n    n = int(input("n="))\r\n    e = int(input("e="))\r\n    c = int(input("c="))\r\n    i = gmpy2.isqrt(n)\r\n    p, q = 0, 0\r\n    while True:\r\n        if n - (i * (n // i)) == 0:\r\n            p = i\r\n            q = n // i\r\n            break\r\n        i += 1\r\n    phi = (p - 1) * (q - 1)\r\n    d = gmpy2.invert(e, phi)\r\n    m = pow(c, d, n)\r\n    print("\u660e\u6587\uff1a", libnum.n2s(m))\r\n\r\n\r\ndef Broadcast():\r\n    print(\'n,e,c\u7531\u6587\u4ef6\u5bfc\u5165\uff0c\u8bf7\u786e\u4fdd\u683c\u5f0f\u4e3a[{"c": , "e": , "n":}]\')\r\n    print("\u4e0d\u540c\u7ec4\u7528\u9017\u53f7\u9694\u5f00\uff0c\u5982[{},{}]")\r\n    file_name = input("\u8bf7\u8f93\u5165\u6587\u4ef6\u540d\uff1a")\r\n    with open(file_name, \'r\') as f:\r\n        f = f.read()\r\n    sessions = eval(f)\r\n    data = []\r\n    for session in sessions:\r\n        e = session[\'e\']\r\n        n = session[\'n\']\r\n        msg = session[\'c\']\r\n        data = data + [(msg, n)]\r\n    print("Please wait, performing CRT")\r\n    x, n = CRT(data)\r\n    e = session[\'e\']\r\n    m = gmpy2.iroot(x, e)[0]\r\n    print("\u660e\u6587\uff1a", libnum.n2s(m))\r\n\r\n\r\nif __name__ == "__main__":\r\n    print("1.\u5df2\u77e5p,q,e")\r\n    print("2.\u5171\u6a21\u653b\u51fb")\r\n    print("3.\u5c0f\u660e\u6587\u653b\u51fb\uff0ce\u4e00\u822c\u4e3a3")\r\n    print("4.\u5df2\u77e5n,e,dp")\r\n    print("5.\u6a21\u4e0d\u4e92\u7d20\uff0c\u6c42\u51fa\u5171\u56e0\u5b50p")\r\n    print("6.\u4e09\u4e2a\u7d20\u6570\u7684RSA")\r\n    print("7.\u8bfb\u53d6RSA\u516c\u94a5\u6587\u4ef6\uff0c\u79c1\u94a5\u6587\u4ef6\u548c\u5bc6\u6587")\r\n    print("8.p,q\u76f8\u8fd1")\r\n    print("9.\u4f4e\u52a0\u5bc6\u6307\u6570\u5e7f\u64ad\u653b\u51fb")\r\n    x = input("\u8bf7\u9009\u62e9\u89e3\u5bc6\u65b9\u6cd5\uff1a")\r\n\r\n    if x == \'1\':\r\n        p_q_e()\r\n    if x == \'2\':\r\n        Common_Modulus()\r\n    if x == \'3\':\r\n        Small_plaintext_e3()\r\n    if x == \'4\':\r\n        n_e_dp()\r\n    if x == \'5\':\r\n        N2_equal_P()\r\n    if x == \'6\':\r\n        Prime_3()\r\n    if x == \'7\':\r\n        RSA_File()\r\n    if x == \'8\':\r\n        next_prime()\r\n    if x == \'9\':\r\n        Broadcast()\r\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"vigenere\u52a0\u5bc6\u57fa\u4e8e\u8bcd\u9891\u5206\u6790\u53ef\u5f02\u6216",children:"Vigenere\u52a0\u5bc6(\u57fa\u4e8e\u8bcd\u9891\u5206\u6790\uff0c\u53ef\u5f02\u6216)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from itertools import *\r\nfrom string import printable\r\nalphabet = list(range(256))\r\nLETTER_FREQUENCY = {\r\n    ' ': 0.25000,\r\n    'e': 0.12702,\r\n    't': 0.09056,\r\n    'a': 0.08167,\r\n    'o': 0.07507,\r\n    'i': 0.06966,\r\n    'n': 0.06749,\r\n    's': 0.06327,\r\n    'h': 0.06094,\r\n    'r': 0.05987,\r\n    'd': 0.04253,\r\n    'l': 0.04025,\r\n    'c': 0.02782,\r\n    'u': 0.02758,\r\n    'm': 0.02406,\r\n    'w': 0.02360,\r\n    'f': 0.02228,\r\n    'g': 0.02015,\r\n    'y': 0.01974,\r\n    'p': 0.01929,\r\n    'b': 0.01492,\r\n    'v': 0.00978,\r\n    'k': 0.00772,\r\n    'j': 0.00153,\r\n    'x': 0.00150,\r\n    'q': 0.00095,\r\n    'z': 0.00074\r\n}\r\ndef IndCo(s):\r\n    N = len(s)\r\n    frequency = [s.count(c) for c in alphabet]\r\n    return sum(i**2 - i for i in frequency) / (N**2 - N)\r\ndef CalKeyLength(s):\r\n    res = []\r\n    for kl in range(2, 38):\r\n        subs = [s[i::kl] for i in range(kl)]\r\n        if sum(IndCo(si) for si in subs) / kl > 0.06:\r\n            if all(map(lambda x: kl % x, res)):\r\n                res.append(kl)\r\n    return res\r\ndef score(s):\r\n    score = 0\r\n    for c in s.lower():\r\n        if c in LETTER_FREQUENCY:\r\n            score += LETTER_FREQUENCY[c]\r\n    return score\r\n# def RecoverKey(ct, kl):\r\n#     keyword = ''\r\n#     subs = [ct[i::kl] for i in range(kl)]\r\n#     for s in subs:\r\n#         frequency = [s.count(c) for c in alphabet]\r\n#         most_fqc = max(frequency)\r\n#         keyword += alphabet[(frequency.index(most_fqc) - 4) % len(alphabet)]\r\n#     return keyword\r\ndef RecoverKey(ct, kl):\r\n    key = b''\r\n    subs = [ct[i::kl] for i in range(kl)]\r\n    for s in subs:\r\n        scores = []\r\n        for xor in range(256):\r\n            xored_s = ''.join(chr(c ^ xor) for c in s)\r\n            if all(c in printable for c in xored_s):\r\n                scores.append((xor, score(xored_s)))\r\n        key += bytes([max(scores, key=lambda x: x[1])[0]])\r\n    return key\r\ndef Vigenere_dec(cipher, key):\r\n    keyCircle = cycle(key)\r\n    pt = ''\r\n    for c in cipher:\r\n        pt += chr(c ^ next(keyCircle))\r\n    return pt\r\n# def Vigenere_dec(ct, k):\r\n#     shifts = cycle(alphabet.index(c) for c in k)\r\n#     pt = ''\r\n#     for c in ct.lower():\r\n#         if c not in alphabet:\r\n#             next(shifts)\r\n#             pt += c\r\n#             continue\r\n#         pt += alphabet[(alphabet.index(c) - next(shifts)) % len(alphabet)]\r\n#     return pt\r\ndef main():\r\n    cipher = b'G\\x05!\\x02X\\x13!\\x10\\tO\\x06\\x14g;\\x10\\x01m?+OB\\x1e0\\x0cP\\x1b\\x07\\x1fg?\\x0e\\x10 36\\x1bFV:\\x04Pe\\x0eZ7;\\x0b\\x1b9?6\\x08\\x15\\x19\\'B\\x14\\x1d\\x0e\\r.4\\x05U/74\\x0e[\\x150B\\x15\\x0e\\x0c\\x12g5\\x16\\x1d($xeZ\\x03!LP;\\x07\\x134z\\x01\\x1a8:<OW\\x13u\\x16\\x18\\nO\\x15%0\\x07\\x169%x\\x1b]\\x138\\x11\\x15\\x03\\x19\\x1f4vB\\x7f/#,O\\\\\\x02u\\x01\\x11\\x01O\\x1b+)\\rU?34\\x0eA\\x13u\\x16\\x1fO\\x0c\\x15+5\\x10\\x06m76\\x0b\\x15|:\\x16\\x18\\n\\x1dZ$5\\x0f\\x05\"%1\\x1b\\\\\\x19;\\x03\\x1cO\\x1b\\x1f$2\\x0c\\x1c<#=\\x1c\\x1b|\\x0c\\r\\x05O\\x02\\x1b>z\\x0c\\x1a9v*\\nT\\x1a<\\x18\\x15O\\x06\\x0ekz\\x00\\x009v!\\x00@\\x04u\\x00\\x02\\x0e\\x06\\x14gP\\x0b\\x06m4-\\x1cLV\"\\r\\x02\\x04\\x06\\x14 z\\x00\\x10%?6\\x0b\\x15\\x02=\\x07P\\x1c\\x0c\\x1f)?\\x11U99x\\x1cP\\x13>Bz\\x00\\x1a\\x0eg)\\x1b\\x18 3,\\x1dLV\"\\n\\x15\\x01O\\x03(/B\\x19\"93OT\\x02u\\x03P\\x1f\\x0e\\x13).\\x0b\\x1b*xxea\\x1e0\\x10\\x15O\\x0e\\x08\"z\\x11\\x10;3*\\x0eYV\\'\\x07\\x11\\x1c\\x00\\x144z\\x04\\x1a?v,\\x07\\\\\\x05{B$\\x07\\nZM<\\x0b\\x07>\"x\\x06FV!\\n\\x11\\x1bO\\r\"}\\x10\\x10m>9\\x1dQ[\"\\x0b\\x02\\n\\x0bZ35B\\x19\"93OS\\x19\\'Bz\\x06\\x1bTg\\x15\\x17\\x07m76\\x0c\\\\\\x13;\\x16P\\x0e\\x01\\x19\")\\x16\\x1a?%x\\x02T\\x0fu\\x0c\\x1f\\x1bO\\x12&,\\x07U%7<O?\\x17u\\x0c\\x11\\x02\\nZ!5\\x10U$\"tOW\\x03!B\\x04\\x07\\n\\x03g1\\x0c\\x10:v,\\x07T\\x02u\\x16\\x18\\n\\x06\\x08gP\\r\\x02#v:\\x00Q\\x1f0\\x11P\\x18\\n\\x08\"z\\x00\\x14>?;\\x0eY\\x1a,B\\x03\\x16\\x02\\x17\".\\x10\\x1c.74C\\x15\\x17&Bz\\x18\\n\\x08\"z\\x16\\x1d\"%=OZ\\x10u\\x12\\x1f\\x1b\\n\\x1433\\x03\\x19m&*\\nQ\\x17!\\r\\x02\\x1cO\\x155z\\x12\\x07(/vO?\"=\\x07\\x02\\n\\t\\x155?NU9>1\\x1c\\x15\\x154\\x0f\\x15O\\x06\\x14g2\\x03\\x1b)/x\\x18]\\x13!\\n\\x15\\x1dOp$2\\r\\x1a>?6\\x08\\x15\\x17u\\x0f\\x11\\x1b\\nVg9\\x03\\x01.>1\\x01RV1\\x0b\\x1e\\x01\\n\\x08g5\\x10UG7.\\x00\\\\\\x12<\\x0c\\x17O\\r\\x1f.4\\x05U\"8x\\x1b]\\x13u\\x0f\\x15\\x01\\x1aZ(<B\\x14m%6\\x0eG\\x1a<\\x0c\\x17COp//\\x0c\\x12?/x\\x1fT\\x15>B\\x1f\\tO\\r(6\\x14\\x10>v7\\x1d\\x15\\x140\\x03\\x02\\x1cNp\\x13;\\t\\x10m7x\\x03Z\\x19>B\\x11\\x1bO\\x03(/\\x10U+7;\\n\\x15\\x1f;B\\x04\\x07\\nZ*3\\x10\\x07\"$xeT\\x181B\\x19\\x02\\x0e\\x1d.4\\x07U,v4\\x06[\\x13u\\x11\\x04\\x1d\\x0e\\x13 2\\x16U)9/\\x01\\x15\\x02=\\x07Pe\\x02\\x13#>\\x0e\\x10cv\\x01\\x00@Q9\\x0eP\\x1c\\n\\x1fg8\\r\\x01%v+\\x06Q\\x13&B\\x1f\\tO\\x03(/\\x10UG09\\x0cPV4\\x10\\x15O\\x1f\\x08\".\\x16\\x0cm%!\\x02X\\x13!\\x10\\x19\\x0c\\x0e\\x16iz6\\x1d$%x\\x06FV_\\t\\x1e\\x00\\x18\\x14g;\\x11U/?4\\x0eA\\x13\\'\\x03\\x1cO\\x1c\\x03*7\\x07\\x01?/x\\x0e[\\x12u\\x0b\\x04H\\x1cZM-\\n\\x10?3x\\rZ\\x02=B\\x03\\x06\\x0b\\x1f4z\\x07\\x1c9>=\\x1d\\x15\\x05<\\x06\\x15O\\x00\\x1cg.\\n\\x1c>vR\\x0b\\\\\\x00<\\x06\\x19\\x01\\x08Z+3\\x0c\\x10m7(\\x1fP\\x17\\'B\\x1d\\x00\\x1d\\x1fg5\\x10U!3+\\x1c\\x15\\x02=\\x07P\\x1c\\x0e\\x17\"th&\"v0\\nG\\x13u\\x0b\\x03O\\x1b\\x12\"z\\x04\\x19,1bO?\\x1e2\\x03\\x1d\\n\\x14\"w(=\\x1cx{90@%f\\x04%^DN)>F\\x13\\x18\\x186\\x16j5d\\x128\\\\\\x1d\\x07M'\r\n    # cipher = b''.join(bytes([c - 1]) for c in cipher)\r\n    kls = CalKeyLength(cipher)\r\n    print(f\"All probable key length: {kls}\")\r\n    for kl in kls:\r\n        key = RecoverKey(cipher, kl)\r\n        print(f\"Key: {key}\")\r\n        print(Vigenere_dec(cipher, key))\r\nif __name__ == '__main__':\r\n    main()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u7206\u7834base64\u5927\u5c0f\u5199",children:"\u7206\u7834base64\u5927\u5c0f\u5199"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import base64\r\n\r\ntext = \'ZMXHZ3TCDXI1DF9ZMF9LEN0=\' #\u8fd9\u91cc\u8f93\u5165\u5f85\u89e3\u5bc6\u6587\r\n\r\n\r\ndef all_possible(text):\r\n    res=[""]\r\n    for i in text:\r\n        if not i.isalpha():\r\n            for j in range(len(res)):\r\n                res[j] += i\r\n        else:\r\n            for k in range(len(res)):\r\n                tmp = res[k]\r\n                res[k] += i.lower()\r\n                res.append(tmp + i.upper())\r\n    return res\r\n\r\ndef baopo():\r\n    k = all_possible(text)\r\n    res = []\r\n    for i in k:\r\n        try:\r\n            f = base64.b64decode(i + \'\').decode("utf-8")\r\n            if(f.isprintable()):\r\n                res.append(f)\r\n        except:\r\n            pass\r\n\r\n    for i in res:\r\n        print(i)\r\n    print("[*]\u4e00\u5171\u89e3\u51fa{0}\u4e2a".format(len(res)))\r\n\r\nbaopo()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u51b0\u874exor\u89e3\u5bc6-php",children:"\u51b0\u874exor\u89e3\u5bc6-php"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\r\n$key1=\"8dddd282f7b5125bLbptYjdmMWI4ZketfMqs+Pt4UU45UAFSyKkfUx0RSxrD/S6FNWbN6MfnLmIzYw==6b1ce45ad828e150\";\r\n//\u76f4\u63a5\u4f7f\u7528encode\u65b9\u6cd5\r\nfunction encode($D,$K){\r\n    for($i=0;$i<strlen($D);$i++) {\r\n        $c = $K[$i+1&15];\r\n        $D[$i] = $D[$i]^$c;\r\n    }\r\n    return $D;\r\n}\r\n\r\n$key='421eb7f1b8e4b3cf';\r\n$str=substr($key1, 16);\r\necho $str;\r\necho PHP_EOL;\r\n$str2=substr($str,0,-16);\r\necho $str2;\r\necho PHP_EOL;\r\n$str3=gzdecode(encode(base64_decode($str2),$key));\r\n//gzdecode(encode(base64_decode($key1),$key))\r\necho $str3;\r\n?>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u89e3\u538bzip-rar-targz\u5957\u5a03",children:"\u89e3\u538bzip rar targz\u5957\u5a03"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import zipfile\r\nimport rarfile\r\nimport os\r\nimport tarfile\r\n\r\nwhile True:\r\n    dirs = os.listdir('./')\r\n    files = dirs[1]\r\n    fs = open(files, 'rb').read()\r\n    if fs[:2] == b'PK':\r\n        zipf = zipfile.ZipFile(files, 'r')\r\n        zipf.extractall()\r\n        zipf.close()\r\n        os.remove(files)\r\n    elif fs[:3] == b'Rar':\r\n        rarf = rarfile.RarFile(files, 'r')\r\n        rarf.extractall()\r\n        rarf.close()\r\n        os.remove(files)\r\n    else:\r\n        t = tarfile.open(files)\r\n        t.extractall(path='.')\r\n        t.close()\r\n        os.remove(files)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\u732b\u8138\u53d8\u6362",children:"\u732b\u8138\u53d8\u6362"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import cv2\r\nfrom numba import njit #\u7f16\u8bd1\r\nimport numpy as np\r\n\r\n@njit()\r\ndef arnold_encode(image, shuffle_times, a, b):\r\n    """ Arnold shuffle for rgb image\r\n    Args:\r\n        image: input original rgb image\r\n        shuffle_times: how many times to shuffle\r\n    Returns:\r\n        Arnold encode image\r\n    """\r\n    # 1:\u521b\u5efa\u65b0\u56fe\u50cf\r\n    arnold_image = np.zeros(shape=image.shape)\r\n\r\n    # 2\uff1a\u8ba1\u7b97N\r\n    h, w = image.shape[0], image.shape[1]\r\n    N = h  # \u6216N=w\r\n\r\n    # 3\uff1a\u904d\u5386\u50cf\u7d20\u5750\u6807\u53d8\u6362\r\n    for time in range(shuffle_times):\r\n        for ori_x in range(h):\r\n            for ori_y in range(w):\r\n                # \u6309\u7167\u516c\u5f0f\u5750\u6807\u53d8\u6362\r\n                new_x = (1 * ori_x + b * ori_y) % N\r\n                new_y = (a * ori_x + (a * b + 1) * ori_y) % N\r\n\r\n                arnold_image[new_x, new_y, :] = image[ori_x, ori_y, :]\r\n        image = arnold_image\r\n\r\n    return arnold_image\r\n\r\n\r\ndef arnold_decode(image, shuffle_times, a, b):\r\n    """ decode for rgb image that encoded by Arnold\r\n    Args:\r\n        image: rgb image encoded by Arnold\r\n        shuffle_times: how many times to shuffle\r\n    Returns:\r\n        decode image\r\n    """\r\n    # 1:\u521b\u5efa\u65b0\u56fe\u50cf\r\n    decode_image = np.zeros(shape=image.shape,dtype=int)\r\n\r\n    # 2\uff1a\u8ba1\u7b97N\r\n    h, w = image.shape[0], image.shape[1]\r\n    N = h  # \u6216N=w\r\n\r\n    # 3\uff1a\u904d\u5386\u50cf\u7d20\u5750\u6807\u53d8\u6362\r\n    for time in range(shuffle_times):\r\n        for ori_x in range(h):\r\n            for ori_y in range(w):\r\n                # \u6309\u7167\u516c\u5f0f\u5750\u6807\u53d8\u6362\r\n                new_x = ((a * b + 1) * ori_x + (-b) * ori_y) % N\r\n                new_y = ((-a) * ori_x + ori_y) % N\r\n                decode_image[new_x, new_y, :] = image[ori_x, ori_y, :]\r\n\r\n        image = decode_image\r\n    return decode_image\r\n\r\nimg = cv2.imread("2.png")  #\u53d8\u6362\u7684\u56fe\u7247\r\na = 9\r\nb = 39\r\nst = 1\r\npic = arnold_decode(img,st,a,b)\r\ncv2.imwrite(\'flag.png\',pic)  #\u4fdd\u5b58\u5f97\u5230\u7684\u56fe\u7247\r\n\r\n#\u5f97\u5230\u7684\u5bbd\u548c\u9ad8\u6709\u53ef\u80fd\u4f1a\u548c\u51fa\u9898\u4eba\u7684\u662f\u53cd\u7684\u54e6\n'})}),"\n",(0,i.jsx)(n.h3,{id:"\u65e0\u6587\u4ef6\u5934ihdr\u4f46idat\u6b63\u786e\u53ef\u5f97\u5bbd\u9ad8\u8fd8\u539f",children:"\u65e0\u6587\u4ef6\u5934IHDR\u4f46IDAT\u6b63\u786e\u53ef\u5f97\u5bbd\u9ad8\u8fd8\u539f"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import os,zlib,re,sys\r\nimport struct\r\nfrom PIL import Image\r\nfrom Crypto.Util.number import *\r\n#\u8003\u8651\u9010\u884c\u548c\u9694\u884c\u626b\u63cf2\u79cd\u60c5\u51b5\r\nfile=r'playball.png'\r\n\r\nfr=open(file,'rb').read()\r\npath=os.getcwd()\r\ndef chdir(mypath):\r\n    tmppath=path+mypath\r\n    print(tmppath)\r\n    if os.path.exists(tmppath):\r\n        os.chdir(tmppath)\r\n    else:\r\n        os.mkdir(tmppath)\r\n        os.chdir(tmppath)\r\n\r\nchunckid=[b'IHDR',b'PLTE',b'IDAT',b'IEND',b'cHRM',b'gAMA',b'iCCP',b'sBIT',b'sRGB',b'bKGD',b'hIST',b'tRNS',b'pHYs',b'sPLT',b'tIME',b'iTXt',b'tEXt',b'zTXt']\r\nchuncks=[]\r\ni=4\r\nwhile i<len(fr):\r\n    if fr[i:i+4] in chunckid:\r\n        try:\r\n            datalen,dataname=struct.unpack(\">I4s\",fr[i-4:i+4])\r\n            dataformat='>I4s'+str(datalen)+'s'+'4s'\r\n            datalen,dataname,data,datacrc=struct.unpack(dataformat,fr[i-4:i-4+8+datalen+4])\r\n            realcrc=zlib.crc32(dataname+data).to_bytes(4,'big')\r\n            if realcrc!=datacrc:\r\n                datacrc=realcrc\r\n                print(dataname,'crc32 fixed')\r\n            print(datalen,bytes.decode(dataname,encoding='utf-8'),hex(int.from_bytes(datacrc,'big')))\r\n            chuncks.append(fr[i-4:i-4+8+datalen]+realcrc)\r\n            i=i+8+datalen+4 #\u6700\u5c11\u52a0\u4e00\uff0c\u9632\u6b62\u51fa\u73b0iend\r\n        except: #\u9632\u6b62\u4e0d\u80fd\u89e3\u6790\u7684\u7ed3\u6784\u4f53\u4e2d\u51fa\u73b0png chunckid\u7684\u5173\u952e\u5b57\uff0c\u6307\u9488\u76f4\u63a5\u6307\u5411\u4e0b\u4e00\u4e2a\u3002\r\n            i=i+1\r\n            continue    \r\n    else:\r\n        i=i+1\r\n\r\nfor chk in chuncks:  #\u76f4\u63a5\u4e22\u5f03IHDR\u5934\u90e8\r\n    if chk[4:8] == b'IHDR':\r\n        chuncks.remove(chk)    \r\n\r\nidat=[tmp for tmp in chuncks if tmp[4:8]==b'IDAT']    \r\nblocks=[tmp[8:int.from_bytes(tmp[:4],'big')+8] for tmp in chuncks if tmp[4:8]==b'IDAT']\r\nblocks=b''.join(blocks) #\u7ec4\u5408\u6570\u636e\r\ndata=zlib.decompressobj().decompress(blocks) #\u89e3\u7801zlib\u5f97\u5230\u50cf\u7d20\uff08\u542bfilter\uff09\r\nopen('mytest.idat','wb').write(data)\r\n#\u6570\u7ec4\uff0c\u5206\u522b\u4e3acolortype\uff0ccolortype\u5bf9\u5e94\u989c\u8272\u79cd\u7c7b\u6240\u5360\u901a\u9053\u6570\uff0c\u8be5colortype\u901a\u9053\u5141\u8bb8\u7684\u5b57\u8282\u4f4d\u6570bits(\u8272\u6df1)\r\nbt_ch_1=[(2,3,8),(2,3,16), \\\r\n        (6,4,8),(6,4,16), \\\r\n        (4,2,8),(4,2,16), \\\r\n        (0,1,1),(0,1,2),(0,1,4),(0,1,8),(0,1,16)]\r\nbt_ch_2=[(2,3,8),(2,3,16), \\\r\n        (6,4,8),(6,4,16)]    \r\nbt_ch_22=[(2,3,8),(6,4,8)]    \r\nbt_ch_3=[(3,1,8),(3,1,4),(3,1,2),(3,1,1)] \r\nbt_ch_33=[(3,1,8)]\r\n####################################################################################################################################\r\ndef crack_no_inter(bt_ch,width):\r\n    chdir('\\\\PNG_no_Interlace')\r\n    interlace=b'\\x00' #\u9996\u5148\u8003\u8651\u9010\u884c\u626b\u63cf\u7684\u60c5\u51b5\r\n    for w in range (1,width): \r\n        print('percent: {:.2f}%'.format(w/width*100))\r\n        for i in bt_ch:\r\n            colortype=i[0]\r\n            colorchannel=i[1]\r\n            bits=i[2]\r\n            data1=[t for t in data[::(bits*colorchannel*w//8+1)]] #\u4ee51\u4e2a\u5b57\u8282\u7684filter\u5934\u52a0\u4e0a\u626b\u63cf\u7ebf\u6765\u5207\u7247\r\n            # data2=[data[i:i+(bits*colorchannel*w//8+1)] for i in range(0,len(data),bits*colorchannel*w//8+1) ] #\u626b\u63cf\u7ebf\u6570\u636e\r\n            if set(data1).issubset(b'\\x00\\x01\\x02\\x03\\x04') and len(data1)!=1: #\u5982\u679c\u6bcf\u7247\u7684\u5934\u90e8\u5408\u96c6\u90fd\u5728\uff0c0,1,2,3,4\u4ee5\u5185\uff0c\u5c31\u8bf4\u660e\u5207\u7247\u53ef\u80fd\u6b63\u786e\uff0c\u5f97\u5230\u5bbd\u5ea6\r\n                # data2=[data[i:i+(bits*colorchannel*w//8+1)] for i in range(0,len(data),bits*colorchannel*w//8+1) ]\r\n                # res.append((colortype,colorchannel,bits,w,len(data1)))\r\n                print(w,len(data1),colortype,':',colorchannel,':',bits) \r\n                head=b'\\x89\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52'+w.to_bytes(4,'big')+len(data1).to_bytes(4,'big')+bits.to_bytes(1,'big')+colortype.to_bytes(1,'big')+b'\\x00\\x00'+interlace\r\n                headcrc=zlib.crc32(head[12:])\r\n                head=head+headcrc.to_bytes(4,'big')\r\n                with open(str(w)+'X'+str(len(data1))+'_'+str(colortype)+'_'+str(colorchannel)+'_'+str(bits)+'.png','wb') as fw:\r\n                    fw.write(head+b''.join(chuncks))\r\n            elif len(data1)==1:\r\n                break     \r\n    print('\u9010\u884c\u626b\u63cf\u5b8c\u6210\uff0c\u8bf7\u5728PNG_no_Interlace\u76ee\u5f55\u4e0b\u67e5\u770b\u662f\u5426\u6709\u6b63\u5e38\u663e\u793a\u7684\u56fe\u7247\uff0c\u4e0b\u9762\u5f00\u59cb\u9694\u884c\u626b\u63cf\uff0c\u5148\u8003\u8651\u5e38\u89c1\u7684\u8272\u5f69\u6a21\u5f0f(\u975e\u7070\u5ea6)\uff0c\u5206\u8fa8\u7387\u57282000x2000\u4ee5\u5185')\r\n    print(150*'\u2193')              \r\n####################################################################################################################################\r\ndef crack_adam7_inter(bt_ch,width,height):\r\n    chdir('\\\\PNG_Adam7_Interlace')      \r\n    interlace=b'\\x01' #\u8003\u8651\u9694\u884c\u626b\u63cf\u7684\u60c5\u51b5\r\n    for w in range(1,width):\r\n        print('percent: {:.2f}%'.format(w/width*100))\r\n        for h in range(1,height):\r\n            for i in bt_ch:\r\n                w1=[i for i in range(w)]\r\n                h1=[i for i in range(h)]\r\n                colortype=i[0]\r\n                colorchannel=i[1]\r\n                bits=i[2] #7\u6b21\u626b\u63cf\uff0c\u6309\u7167\u90a3\u4e2a8x8\u65b9\u9635\u8fdb\u884c7\u6b21\u626b\u63cf\u751f\u62107\u4e2a\u5c0f\u56fe\uff0c\u7136\u540e\u62fc\u63a5\u6210idat,\u5982\u679c\u957f\u5ea6\u521a\u597d\u548czlib decompress\u540e\u7684\u6570\u636e\u5757data\u957f\u5ea6\u76f8\u7b49\uff0c\u5224\u65ad\u5bbd\u9ad8\u6b63\u786e\r\n                len_1=(len(w1[0::8])*bits*colorchannel//8+1)*len(h1[0::8]) \\\r\n                     +(len(w1[4::8])*bits*colorchannel//8+1)*len(h1[0::8]) \\\r\n                     +(len(w1[0::4])*bits*colorchannel//8+1)*len(h1[4::8]) \\\r\n                     +(len(w1[2::4])*bits*colorchannel//8+1)*len(h1[0::4]) \\\r\n                     +(len(w1[0::2])*bits*colorchannel//8+1)*len(h1[2::4]) \\\r\n                     +(len(w1[1::2])*bits*colorchannel//8+1)*len(h1[0::2]) \\\r\n                     +(len(w1[0::1])*bits*colorchannel//8+1)*len(h1[1::2])\r\n                if len_1==len(data):\r\n                    print(w,h,colortype,colorchannel,bits)\r\n                    head=b'\\x89\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52'+w.to_bytes(4,'big')+h.to_bytes(4,'big')+bits.to_bytes(1,'big')+colortype.to_bytes(1,'big')+b'\\x00\\x00'+interlace\r\n                    headcrc=zlib.crc32(head[12:])\r\n                    head=head+headcrc.to_bytes(4,'big')\r\n                    with open(str(w)+'X'+str(h)+'_'+str(colortype)+'_'+str(colorchannel)+'_'+str(bits)+'.png','wb') as fw:\r\n                        fw.write(head+b''.join(chuncks))                    \r\n####################################################################################################################################\r\n\r\nchks=[i[4:8] for i in chuncks]\r\nif b'PLTE' in chks:\r\n    crack_no_inter(bt_ch_3,20001)\r\n    crack_adam7_inter(bt_ch_33,2001,2001)\r\n    crack_adam7_inter(bt_ch_3,2001,2001)\r\n    crack_adam7_inter(bt_ch_3,20001,20001)  \r\nelse:\r\n    crack_no_inter(bt_ch_1,20001)\r\n    crack_adam7_inter(bt_ch_22,2001,2001)\r\n    crack_adam7_inter(bt_ch_2,2001,2001)\r\n    crack_adam7_inter(bt_ch_1,10001,10001)\n"})})]})}function f(r={}){const{wrapper:n}={...(0,t.R)(),...r.components};return n?(0,i.jsx)(n,{...r,children:(0,i.jsx)(p,{...r})}):p(r)}},28453:(r,n,e)=>{e.d(n,{R:()=>c,x:()=>s});var i=e(96540);const t={},a=i.createContext(t);function c(r){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function s(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:c(r.components),i.createElement(a.Provider,{value:n},r.children)}}}]);